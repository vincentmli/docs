Disassembly of section 2/7:

0000000000000000 <tail_handle_ipv4>:
; {
       0:	bf 16 00 00 00 00 00 00	r6 = r1
       1:	b7 01 00 00 00 00 00 00	r1 = 0
; 	struct ipv4_ct_tuple tuple = {};
       2:	6b 1a 94 ff 00 00 00 00	*(u16 *)(r10 - 108) = r1
       3:	63 1a 90 ff 00 00 00 00	*(u32 *)(r10 - 112) = r1
       4:	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 120) = r1
; 	union macaddr router_mac = NODE_MAC;
       5:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
       7:	6b 2a 84 ff 00 00 00 00	*(u16 *)(r10 - 124) = r2
       8:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
      10:	63 2a 80 ff 00 00 00 00	*(u32 *)(r10 - 128) = r2
; 	struct ct_state ct_state = {};
      11:	63 1a 78 ff 00 00 00 00	*(u32 *)(r10 - 136) = r1
      12:	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 144) = r1
      13:	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 152) = r1
; 	return (void *)(unsigned long)ctx->data_end;
      14:	61 61 50 00 00 00 00 00	r1 = *(u32 *)(r6 + 80)
; 	return (void *)(unsigned long)ctx->data;
      15:	61 67 4c 00 00 00 00 00	r7 = *(u32 *)(r6 + 76)
; 	if (data + tot_len > data_end)
      16:	bf 72 00 00 00 00 00 00	r2 = r7
      17:	07 02 00 00 22 00 00 00	r2 += 34
      18:	b7 04 00 00 00 00 00 00	r4 = 0
      19:	18 09 00 00 7a ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967162 ll
      21:	7b 6a 48 ff 00 00 00 00	*(u64 *)(r10 - 184) = r6
; 	if (data + tot_len > data_end)
      22:	2d 12 2c 07 00 00 00 00	if r2 > r1 goto +1836 <LBB3_244>
      23:	18 09 00 00 7c ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967164 ll
; 	return ip4->frag_off & bpf_htons(0x1FFF);
      25:	69 71 14 00 00 00 00 00	r1 = *(u16 *)(r7 + 20)
; 	tuple.nexthdr = ip4->protocol;
      26:	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 224) = r1
      27:	71 75 17 00 00 00 00 00	r5 = *(u8 *)(r7 + 23)
      28:	73 5a 94 ff 00 00 00 00	*(u8 *)(r10 - 108) = r5
; 	return ip4->saddr == LXC_IPV4;
      29:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      31:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
      33:	67 02 00 00 20 00 00 00	r2 <<= 32
      34:	77 02 00 00 20 00 00 00	r2 >>= 32
      35:	61 73 1a 00 00 00 00 00	r3 = *(u32 *)(r7 + 26)
      36:	b7 04 00 00 00 00 00 00	r4 = 0
; 	if (unlikely(!is_valid_lxc_src_ipv4(ip4)))
      37:	5d 23 1d 07 00 00 00 00	if r3 != r2 goto +1821 <LBB3_244>
; 	tuple.daddr = ip4->daddr;
      38:	61 73 1e 00 00 00 00 00	r3 = *(u32 *)(r7 + 30)
; 	tuple.saddr = ip4->saddr;
      39:	63 1a 8c ff 00 00 00 00	*(u32 *)(r10 - 116) = r1
; 	tuple.daddr = ip4->daddr;
      40:	63 3a 88 ff 00 00 00 00	*(u32 *)(r10 - 120) = r3
; 	return ip4->ihl * 4;
      41:	71 72 0e 00 00 00 00 00	r2 = *(u8 *)(r7 + 14)
      42:	b7 01 00 00 01 00 00 00	r1 = 1
; 		tuple->flags = TUPLE_F_IN;
      43:	73 1a 95 ff 00 00 00 00	*(u8 *)(r10 - 107) = r1
      44:	b7 01 00 00 00 00 00 00	r1 = 0
; 	union tcp_flags tcp_flags = { .value = 0 };
      45:	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 8) = r1
; 	ret = ct_lookup4(get_ct_map4(&tuple), &tuple, ctx, l4_off, CT_EGRESS,
      46:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      48:	15 05 02 00 06 00 00 00	if r5 == 6 goto +2 <LBB3_4>
      49:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll

0000000000000198 <LBB3_4>:
; 	return ip4->ihl * 4;
      51:	67 02 00 00 02 00 00 00	r2 <<= 2
      52:	57 02 00 00 3c 00 00 00	r2 &= 60
; 	l4_off = l3_off + ipv4_hdrlen(ip4);
      53:	07 02 00 00 0e 00 00 00	r2 += 14
; 	switch (tuple->nexthdr) {
      54:	7b 2a 30 ff 00 00 00 00	*(u64 *)(r10 - 208) = r2
      55:	7b 3a 38 ff 00 00 00 00	*(u64 *)(r10 - 200) = r3
      56:	7b 5a 28 ff 00 00 00 00	*(u64 *)(r10 - 216) = r5
      57:	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 192) = r1
      58:	15 05 4c 00 11 00 00 00	if r5 == 17 goto +76 <LBB3_19>
      59:	15 05 2a 00 06 00 00 00	if r5 == 6 goto +42 <LBB3_16>
      60:	18 09 00 00 77 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967159 ll
; 	switch (tuple->nexthdr) {
      62:	55 05 6a 00 01 00 00 00	if r5 != 1 goto +106 <LBB3_23>
      63:	b7 01 00 00 00 00 00 00	r1 = 0
; 			__be16 identifier = 0;
      64:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
      65:	bf a3 00 00 00 00 00 00	r3 = r10
      66:	07 03 00 00 d8 ff ff ff	r3 += -40
; 			if (ctx_load_bytes(ctx, off, &type, 1) < 0)
      67:	bf 61 00 00 00 00 00 00	r1 = r6
      68:	79 a7 30 ff 00 00 00 00	r7 = *(u64 *)(r10 - 208)
      69:	bf 72 00 00 00 00 00 00	r2 = r7
      70:	b7 04 00 00 01 00 00 00	r4 = 1
      71:	85 00 00 00 1a 00 00 00	call 26
      72:	67 00 00 00 20 00 00 00	r0 <<= 32
      73:	c7 00 00 00 20 00 00 00	r0 s>>= 32
      74:	c5 00 5c 00 00 00 00 00	if r0 s< 0 goto +92 <LBB3_22>
; 			if ((type == ICMP_ECHO || type == ICMP_ECHOREPLY) &&
      75:	71 a1 d8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 40)
      76:	bf 12 00 00 00 00 00 00	r2 = r1
      77:	47 02 00 00 08 00 00 00	r2 |= 8
      78:	15 02 01 00 08 00 00 00	if r2 == 8 goto +1 <LBB3_9>
      79:	05 00 0b 00 00 00 00 00	goto +11 <LBB3_11>

0000000000000280 <LBB3_9>:
; 			     ctx_load_bytes(ctx, off + offsetof(struct icmphdr, un.echo.id),
      80:	07 07 00 00 04 00 00 00	r7 += 4
      81:	bf a3 00 00 00 00 00 00	r3 = r10
      82:	07 03 00 00 98 ff ff ff	r3 += -104
; 			     ctx_load_bytes(ctx, off + offsetof(struct icmphdr, un.echo.id),
      83:	bf 61 00 00 00 00 00 00	r1 = r6
      84:	bf 72 00 00 00 00 00 00	r2 = r7
      85:	b7 04 00 00 02 00 00 00	r4 = 2
      86:	85 00 00 00 1a 00 00 00	call 26
      87:	67 00 00 00 20 00 00 00	r0 <<= 32
      88:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 			if ((type == ICMP_ECHO || type == ICMP_ECHOREPLY) &&
      89:	c5 00 4d 00 00 00 00 00	if r0 s< 0 goto +77 <LBB3_22>
; 			switch (type) {
      90:	71 a1 d8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 40)

00000000000002d8 <LBB3_11>:
      91:	b7 02 00 00 00 00 00 00	r2 = 0
; 			tuple->dport = 0;
      92:	63 2a 90 ff 00 00 00 00	*(u32 *)(r10 - 112) = r2
      93:	b7 02 00 00 01 00 00 00	r2 = 1
; 			switch (type) {
      94:	65 01 4c 00 0a 00 00 00	if r1 s> 10 goto +76 <LBB3_24>
      95:	15 01 52 00 00 00 00 00	if r1 == 0 goto +82 <LBB3_26>
      96:	15 01 4c 00 03 00 00 00	if r1 == 3 goto +76 <LBB3_25>
      97:	15 01 01 00 08 00 00 00	if r1 == 8 goto +1 <LBB3_15>
      98:	05 00 14 01 00 00 00 00	goto +276 <LBB3_58>

0000000000000318 <LBB3_15>:
; 				tuple->dport = identifier;
      99:	69 a1 98 ff 00 00 00 00	r1 = *(u16 *)(r10 - 104)
     100:	6b 1a 90 ff 00 00 00 00	*(u16 *)(r10 - 112) = r1
     101:	05 00 11 01 00 00 00 00	goto +273 <LBB3_58>

0000000000000330 <LBB3_16>:
; 		.daddr = ip4->daddr,
     102:	61 71 1e 00 00 00 00 00	r1 = *(u32 *)(r7 + 30)
; 	struct ipv4_frag_id frag_id = {
     103:	63 1a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r1
; 		.saddr = ip4->saddr,
     104:	61 71 1a 00 00 00 00 00	r1 = *(u32 *)(r7 + 26)
; 	struct ipv4_frag_id frag_id = {
     105:	63 1a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r1
; 		.id = ip4->id,
     106:	69 71 12 00 00 00 00 00	r1 = *(u16 *)(r7 + 18)
; 	struct ipv4_frag_id frag_id = {
     107:	6b 1a e0 ff 00 00 00 00	*(u16 *)(r10 - 32) = r1
     108:	b7 01 00 00 00 00 00 00	r1 = 0
; 		.proto = ip4->protocol,
     109:	71 73 17 00 00 00 00 00	r3 = *(u8 *)(r7 + 23)
; 	struct ipv4_frag_id frag_id = {
     110:	73 1a e3 ff 00 00 00 00	*(u8 *)(r10 - 29) = r1
     111:	73 3a e2 ff 00 00 00 00	*(u8 *)(r10 - 30) = r3
     112:	b7 03 00 00 01 00 00 00	r3 = 1
; 	return ip4->frag_off & bpf_htons(0x3FFF);
     113:	69 76 14 00 00 00 00 00	r6 = *(u16 *)(r7 + 20)
     114:	57 06 00 00 3f ff 00 00	r6 &= 65343
; 	if (unlikely(is_fragment)) {
     115:	15 06 60 00 00 00 00 00	if r6 == 0 goto +96 <LBB3_33>
; 	return ctx->len;
     116:	79 a2 48 ff 00 00 00 00	r2 = *(u64 *)(r10 - 184)
     117:	61 28 00 00 00 00 00 00	r8 = *(u32 *)(r2 + 0)
; 	struct metrics_value *entry, newEntry = {};
     118:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
     119:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     120:	b7 01 00 00 09 02 00 00	r1 = 521
; 	struct metrics_key key = {};
     121:	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 176) = r1
     122:	bf a2 00 00 00 00 00 00	r2 = r10
     123:	07 02 00 00 50 ff ff ff	r2 += -176
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
     124:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     126:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
     127:	15 00 36 00 00 00 00 00	if r0 == 0 goto +54 <LBB3_27>
; 		entry->count += 1;
     128:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
     129:	07 01 00 00 01 00 00 00	r1 += 1
     130:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
     131:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
     132:	0f 81 00 00 00 00 00 00	r1 += r8
     133:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
     134:	05 00 3a 00 00 00 00 00	goto +58 <LBB3_28>

0000000000000438 <LBB3_19>:
; 		.daddr = ip4->daddr,
     135:	61 71 1e 00 00 00 00 00	r1 = *(u32 *)(r7 + 30)
; 	struct ipv4_frag_id frag_id = {
     136:	63 1a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r1
; 		.saddr = ip4->saddr,
     137:	61 71 1a 00 00 00 00 00	r1 = *(u32 *)(r7 + 26)
; 	struct ipv4_frag_id frag_id = {
     138:	63 1a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r1
; 		.id = ip4->id,
     139:	69 71 12 00 00 00 00 00	r1 = *(u16 *)(r7 + 18)
; 	struct ipv4_frag_id frag_id = {
     140:	6b 1a e0 ff 00 00 00 00	*(u16 *)(r10 - 32) = r1
     141:	b7 01 00 00 00 00 00 00	r1 = 0
; 		.proto = ip4->protocol,
     142:	71 73 17 00 00 00 00 00	r3 = *(u8 *)(r7 + 23)
; 	struct ipv4_frag_id frag_id = {
     143:	73 1a e3 ff 00 00 00 00	*(u8 *)(r10 - 29) = r1
     144:	73 3a e2 ff 00 00 00 00	*(u8 *)(r10 - 30) = r3
; 	return ip4->frag_off & bpf_htons(0x3FFF);
     145:	69 76 14 00 00 00 00 00	r6 = *(u16 *)(r7 + 20)
     146:	57 06 00 00 3f ff 00 00	r6 &= 65343
; 	if (unlikely(is_fragment)) {
     147:	15 06 a9 00 00 00 00 00	if r6 == 0 goto +169 <LBB3_49>
; 	return ctx->len;
     148:	79 a2 48 ff 00 00 00 00	r2 = *(u64 *)(r10 - 184)
     149:	61 28 00 00 00 00 00 00	r8 = *(u32 *)(r2 + 0)
; 	struct metrics_value *entry, newEntry = {};
     150:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
     151:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     152:	b7 01 00 00 09 02 00 00	r1 = 521
; 	struct metrics_key key = {};
     153:	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 176) = r1
     154:	bf a2 00 00 00 00 00 00	r2 = r10
     155:	07 02 00 00 50 ff ff ff	r2 += -176
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
     156:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     158:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
     159:	15 00 87 00 00 00 00 00	if r0 == 0 goto +135 <LBB3_45>
; 		entry->count += 1;
     160:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
     161:	07 01 00 00 01 00 00 00	r1 += 1
     162:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
     163:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
     164:	0f 81 00 00 00 00 00 00	r1 += r8
     165:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
     166:	05 00 8b 00 00 00 00 00	goto +139 <LBB3_46>

0000000000000538 <LBB3_22>:
     167:	18 09 00 00 79 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967161 ll

0000000000000548 <LBB3_23>:
     169:	b7 04 00 00 00 00 00 00	r4 = 0
     170:	05 00 98 06 00 00 00 00	goto +1688 <LBB3_244>

0000000000000558 <LBB3_24>:
; 			switch (type) {
     171:	07 01 00 00 f5 ff ff ff	r1 += -11
     172:	25 01 ca 00 01 00 00 00	if r1 > 1 goto +202 <LBB3_58>

0000000000000568 <LBB3_25>:
; 				tuple->flags |= TUPLE_F_RELATED;
     173:	71 a1 95 ff 00 00 00 00	r1 = *(u8 *)(r10 - 107)
     174:	47 01 00 00 02 00 00 00	r1 |= 2
     175:	73 1a 95 ff 00 00 00 00	*(u8 *)(r10 - 107) = r1
     176:	b7 02 00 00 00 00 00 00	r2 = 0
     177:	05 00 c5 00 00 00 00 00	goto +197 <LBB3_58>

0000000000000590 <LBB3_26>:
; 				tuple->sport = identifier;
     178:	69 a1 98 ff 00 00 00 00	r1 = *(u16 *)(r10 - 104)
     179:	6b 1a 92 ff 00 00 00 00	*(u16 *)(r10 - 110) = r1
     180:	b7 02 00 00 00 00 00 00	r2 = 0
     181:	05 00 c1 00 00 00 00 00	goto +193 <LBB3_58>

00000000000005b0 <LBB3_27>:
; 		newEntry.bytes = bytes;
     182:	7b 8a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r8
     183:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
     184:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     185:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
     186:	07 02 00 00 50 ff ff ff	r2 += -176
     187:	bf a3 00 00 00 00 00 00	r3 = r10
     188:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
     189:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     191:	b7 04 00 00 00 00 00 00	r4 = 0
     192:	85 00 00 00 02 00 00 00	call 2

0000000000000608 <LBB3_28>:
; 	return ip4->frag_off & bpf_htons(0x1FFF);
     193:	69 71 14 00 00 00 00 00	r1 = *(u16 *)(r7 + 20)
     194:	57 01 00 00 1f ff 00 00	r1 &= 65311
     195:	b7 03 00 00 01 00 00 00	r3 = 1
     196:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_30>
     197:	b7 03 00 00 00 00 00 00	r3 = 0

0000000000000630 <LBB3_30>:
     198:	79 a2 30 ff 00 00 00 00	r2 = *(u64 *)(r10 - 208)
; 		if (likely(not_first_fragment))
     199:	15 01 0c 00 00 00 00 00	if r1 == 0 goto +12 <LBB3_33>
     200:	bf 37 00 00 00 00 00 00	r7 = r3
     201:	bf a2 00 00 00 00 00 00	r2 = r10
     202:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	tmp = map_lookup_elem(&IPV4_FRAG_DATAGRAMS_MAP, frag_id);
     203:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     205:	85 00 00 00 01 00 00 00	call 1
; 	if (!tmp)
     206:	55 00 3d 00 00 00 00 00	if r0 != 0 goto +61 <LBB3_39>

0000000000000678 <LBB3_32>:
     207:	18 09 00 00 51 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967121 ll
     209:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
     210:	b7 04 00 00 00 00 00 00	r4 = 0
     211:	05 00 6f 06 00 00 00 00	goto +1647 <LBB3_244>

00000000000006a0 <LBB3_33>:
     212:	bf 37 00 00 00 00 00 00	r7 = r3
     213:	bf a8 00 00 00 00 00 00	r8 = r10
     214:	07 08 00 00 90 ff ff ff	r8 += -112
; 	ret = ctx_load_bytes(ctx, l4_off, ports, 4);
     215:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
     216:	bf 83 00 00 00 00 00 00	r3 = r8
     217:	b7 04 00 00 04 00 00 00	r4 = 4
     218:	85 00 00 00 1a 00 00 00	call 26
     219:	bf 09 00 00 00 00 00 00	r9 = r0
     220:	67 09 00 00 20 00 00 00	r9 <<= 32
     221:	c7 09 00 00 20 00 00 00	r9 s>>= 32
; 	if (ret < 0)
     222:	c5 09 31 00 00 00 00 00	if r9 s< 0 goto +49 <LBB3_40>
     223:	15 06 30 00 00 00 00 00	if r6 == 0 goto +48 <LBB3_40>
     224:	bf a2 00 00 00 00 00 00	r2 = r10
; 		if (map_update_elem(&IPV4_FRAG_DATAGRAMS_MAP, &frag_id, ports, BPF_ANY))
     225:	07 02 00 00 d8 ff ff ff	r2 += -40
     226:	b7 09 00 00 00 00 00 00	r9 = 0
     227:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     229:	bf 83 00 00 00 00 00 00	r3 = r8
     230:	b7 04 00 00 00 00 00 00	r4 = 0
     231:	85 00 00 00 02 00 00 00	call 2
     232:	67 00 00 00 20 00 00 00	r0 <<= 32
     233:	77 00 00 00 20 00 00 00	r0 >>= 32
     234:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
     235:	15 00 26 00 00 00 00 00	if r0 == 0 goto +38 <LBB3_41>
; 	return ctx->len;
     236:	61 66 00 00 00 00 00 00	r6 = *(u32 *)(r6 + 0)
; 	struct metrics_value *entry, newEntry = {};
     237:	7b 9a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r9
     238:	7b 9a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r9
     239:	b7 01 00 00 0a 02 00 00	r1 = 522
; 	struct metrics_key key = {};
     240:	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 176) = r1
     241:	bf a2 00 00 00 00 00 00	r2 = r10
     242:	07 02 00 00 50 ff ff ff	r2 += -176
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
     243:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     245:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
     246:	15 00 08 00 00 00 00 00	if r0 == 0 goto +8 <LBB3_38>
; 		entry->count += 1;
     247:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
     248:	07 01 00 00 01 00 00 00	r1 += 1
     249:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
     250:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
     251:	0f 61 00 00 00 00 00 00	r1 += r6
     252:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
     253:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
     254:	05 00 13 00 00 00 00 00	goto +19 <LBB3_41>

00000000000007f8 <LBB3_38>:
; 		newEntry.bytes = bytes;
     255:	7b 6a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r6
     256:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
     257:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     258:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
     259:	07 02 00 00 50 ff ff ff	r2 += -176
     260:	bf a3 00 00 00 00 00 00	r3 = r10
     261:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
     262:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     264:	b7 04 00 00 00 00 00 00	r4 = 0
     265:	85 00 00 00 02 00 00 00	call 2
     266:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
     267:	05 00 06 00 00 00 00 00	goto +6 <LBB3_41>

0000000000000860 <LBB3_39>:
; 	case  4: __it_mob(d, s, 32);
     268:	61 01 00 00 00 00 00 00	r1 = *(u32 *)(r0 + 0)
     269:	63 1a 90 ff 00 00 00 00	*(u32 *)(r10 - 112) = r1
     270:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
     271:	05 00 02 00 00 00 00 00	goto +2 <LBB3_41>

0000000000000880 <LBB3_40>:
     272:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 		if (err < 0)
     273:	c5 09 97 ff 00 00 00 00	if r9 s< 0 goto -105 <LBB3_23>

0000000000000890 <LBB3_41>:
     274:	b7 02 00 00 01 00 00 00	r2 = 1
; 		if (has_l4_header) {
     275:	57 07 00 00 ff 00 00 00	r7 &= 255
     276:	15 07 62 00 00 00 00 00	if r7 == 0 goto +98 <LBB3_58>
; 			if (ctx_load_bytes(ctx, off + 12, &tcp_flags, 2) < 0)
     277:	79 a2 30 ff 00 00 00 00	r2 = *(u64 *)(r10 - 208)
     278:	07 02 00 00 0c 00 00 00	r2 += 12
     279:	bf a3 00 00 00 00 00 00	r3 = r10
     280:	07 03 00 00 f8 ff ff ff	r3 += -8
     281:	bf 61 00 00 00 00 00 00	r1 = r6
     282:	b7 04 00 00 02 00 00 00	r4 = 2
     283:	85 00 00 00 1a 00 00 00	call 26
     284:	18 09 00 00 79 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967161 ll
; 			if (ctx_load_bytes(ctx, off + 12, &tcp_flags, 2) < 0)
     286:	67 00 00 00 20 00 00 00	r0 <<= 32
     287:	c7 00 00 00 20 00 00 00	r0 s>>= 32
     288:	c5 00 88 ff 00 00 00 00	if r0 s< 0 goto -120 <LBB3_23>
; 			if (unlikely(tcp_flags.value & (TCP_FLAG_RST|TCP_FLAG_FIN)))
     289:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
     290:	57 01 00 00 00 05 00 00	r1 &= 1280
     291:	b7 02 00 00 01 00 00 00	r2 = 1
     292:	15 01 52 00 00 00 00 00	if r1 == 0 goto +82 <LBB3_58>
     293:	b7 02 00 00 02 00 00 00	r2 = 2
     294:	05 00 50 00 00 00 00 00	goto +80 <LBB3_58>

0000000000000938 <LBB3_45>:
; 		newEntry.bytes = bytes;
     295:	7b 8a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r8
     296:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
     297:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     298:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
     299:	07 02 00 00 50 ff ff ff	r2 += -176
     300:	bf a3 00 00 00 00 00 00	r3 = r10
     301:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
     302:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     304:	b7 04 00 00 00 00 00 00	r4 = 0
     305:	85 00 00 00 02 00 00 00	call 2

0000000000000990 <LBB3_46>:
; 	return ip4->frag_off & bpf_htons(0x1FFF);
     306:	69 71 14 00 00 00 00 00	r1 = *(u16 *)(r7 + 20)
     307:	57 01 00 00 1f ff 00 00	r1 &= 65311
     308:	79 a2 30 ff 00 00 00 00	r2 = *(u64 *)(r10 - 208)
; 		if (likely(not_first_fragment))
     309:	15 01 07 00 00 00 00 00	if r1 == 0 goto +7 <LBB3_49>
     310:	bf a2 00 00 00 00 00 00	r2 = r10
     311:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	tmp = map_lookup_elem(&IPV4_FRAG_DATAGRAMS_MAP, frag_id);
     312:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     314:	85 00 00 00 01 00 00 00	call 1
; 	if (!tmp)
     315:	55 00 1b 03 00 00 00 00	if r0 != 0 goto +795 <LBB3_140>
     316:	05 00 92 ff 00 00 00 00	goto -110 <LBB3_32>

00000000000009e8 <LBB3_49>:
     317:	bf a8 00 00 00 00 00 00	r8 = r10
     318:	07 08 00 00 90 ff ff ff	r8 += -112
; 	ret = ctx_load_bytes(ctx, l4_off, ports, 4);
     319:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
     320:	bf 83 00 00 00 00 00 00	r3 = r8
     321:	b7 04 00 00 04 00 00 00	r4 = 4
     322:	85 00 00 00 1a 00 00 00	call 26
     323:	bf 09 00 00 00 00 00 00	r9 = r0
     324:	67 09 00 00 20 00 00 00	r9 <<= 32
     325:	c7 09 00 00 20 00 00 00	r9 s>>= 32
; 	if (ret < 0)
     326:	c5 09 2d 00 00 00 00 00	if r9 s< 0 goto +45 <LBB3_57>
     327:	15 06 2c 00 00 00 00 00	if r6 == 0 goto +44 <LBB3_57>
     328:	bf a2 00 00 00 00 00 00	r2 = r10
; 		if (map_update_elem(&IPV4_FRAG_DATAGRAMS_MAP, &frag_id, ports, BPF_ANY))
     329:	07 02 00 00 d8 ff ff ff	r2 += -40
     330:	b7 07 00 00 00 00 00 00	r7 = 0
     331:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     333:	bf 83 00 00 00 00 00 00	r3 = r8
     334:	b7 04 00 00 00 00 00 00	r4 = 0
     335:	85 00 00 00 02 00 00 00	call 2
     336:	67 00 00 00 20 00 00 00	r0 <<= 32
     337:	77 00 00 00 20 00 00 00	r0 >>= 32
     338:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
     339:	15 00 1e 00 00 00 00 00	if r0 == 0 goto +30 <LBB3_56>
; 	return ctx->len;
     340:	61 66 00 00 00 00 00 00	r6 = *(u32 *)(r6 + 0)
; 	struct metrics_value *entry, newEntry = {};
     341:	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r7
     342:	7b 7a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r7
     343:	b7 01 00 00 0a 02 00 00	r1 = 522
; 	struct metrics_key key = {};
     344:	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 176) = r1
     345:	bf a2 00 00 00 00 00 00	r2 = r10
     346:	07 02 00 00 50 ff ff ff	r2 += -176
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
     347:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     349:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
     350:	15 00 07 00 00 00 00 00	if r0 == 0 goto +7 <LBB3_54>
; 		entry->count += 1;
     351:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
     352:	07 01 00 00 01 00 00 00	r1 += 1
     353:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
     354:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
     355:	0f 61 00 00 00 00 00 00	r1 += r6
     356:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
     357:	05 00 0b 00 00 00 00 00	goto +11 <LBB3_55>

0000000000000b30 <LBB3_54>:
; 		newEntry.bytes = bytes;
     358:	7b 6a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r6
     359:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
     360:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     361:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
     362:	07 02 00 00 50 ff ff ff	r2 += -176
     363:	bf a3 00 00 00 00 00 00	r3 = r10
     364:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
     365:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     367:	b7 04 00 00 00 00 00 00	r4 = 0
     368:	85 00 00 00 02 00 00 00	call 2

0000000000000b88 <LBB3_55>:
     369:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)

0000000000000b90 <LBB3_56>:
     370:	b7 02 00 00 01 00 00 00	r2 = 1
     371:	05 00 03 00 00 00 00 00	goto +3 <LBB3_58>

0000000000000ba0 <LBB3_57>:
     372:	b7 02 00 00 01 00 00 00	r2 = 1
     373:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 		if (err < 0)
     374:	c5 09 32 ff 00 00 00 00	if r9 s< 0 goto -206 <LBB3_23>

0000000000000bb8 <LBB3_58>:
     375:	7b 2a 18 ff 00 00 00 00	*(u64 *)(r10 - 232) = r2
; 	cilium_dbg3(ctx, DBG_CT_LOOKUP4_1, tuple->saddr, tuple->daddr,
     376:	61 a1 8c ff 00 00 00 00	r1 = *(u32 *)(r10 - 116)
     377:	61 a2 88 ff 00 00 00 00	r2 = *(u32 *)(r10 - 120)
; 		      (bpf_ntohs(tuple->sport) << 16) | bpf_ntohs(tuple->dport));
     378:	69 a3 90 ff 00 00 00 00	r3 = *(u16 *)(r10 - 112)
     379:	69 a4 92 ff 00 00 00 00	r4 = *(u16 *)(r10 - 110)
     380:	b7 05 00 00 02 30 00 00	r5 = 12290
; 	struct debug_msg msg = {
     381:	6b 5a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r5
; 		      (bpf_ntohs(tuple->sport) << 16) | bpf_ntohs(tuple->dport));
     382:	dc 04 00 00 20 00 00 00	r4 = be32 r4
     383:	18 05 00 00 00 00 ff ff 00 00 00 00 00 00 00 00	r5 = 4294901760 ll
     385:	5f 54 00 00 00 00 00 00	r4 &= r5
     386:	dc 03 00 00 10 00 00 00	r3 = be16 r3
     387:	4f 34 00 00 00 00 00 00	r4 |= r3
; 	struct debug_msg msg = {
     388:	18 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r7 = 0 ll
     390:	6b 7a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r7
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     391:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
     392:	63 4a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r4
     393:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
     394:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
     395:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
     396:	bf a4 00 00 00 00 00 00	r4 = r10
     397:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     398:	bf 61 00 00 00 00 00 00	r1 = r6
     399:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     401:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     403:	b7 05 00 00 14 00 00 00	r5 = 20
     404:	85 00 00 00 19 00 00 00	call 25
; 	cilium_dbg3(ctx, DBG_CT_LOOKUP4_2, (tuple->nexthdr << 8) | tuple->flags, 0, 0);
     405:	69 a1 94 ff 00 00 00 00	r1 = *(u16 *)(r10 - 108)
; 	struct debug_msg msg = {
     406:	6b 7a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r7
     407:	b7 02 00 00 02 31 00 00	r2 = 12546
     408:	6b 2a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r2
     409:	b7 07 00 00 00 00 00 00	r7 = 0
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     410:	61 62 44 00 00 00 00 00	r2 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
     411:	63 7a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r7
     412:	63 7a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r7
; 	cilium_dbg3(ctx, DBG_CT_LOOKUP4_2, (tuple->nexthdr << 8) | tuple->flags, 0, 0);
     413:	67 01 00 00 30 00 00 00	r1 <<= 48
     414:	dc 01 00 00 40 00 00 00	r1 = be64 r1
; 	struct debug_msg msg = {
     415:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
     416:	63 2a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r2
     417:	bf a4 00 00 00 00 00 00	r4 = r10
     418:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     419:	bf 61 00 00 00 00 00 00	r1 = r6
     420:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     422:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     424:	b7 05 00 00 14 00 00 00	r5 = 20
     425:	85 00 00 00 19 00 00 00	call 25
     426:	71 a1 f9 ff 00 00 00 00	r1 = *(u8 *)(r10 - 7)
; 	entry = map_lookup_elem(map, tuple);
     427:	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 240) = r1
     428:	bf a2 00 00 00 00 00 00	r2 = r10
     429:	07 02 00 00 88 ff ff ff	r2 += -120
     430:	79 a8 40 ff 00 00 00 00	r8 = *(u64 *)(r10 - 192)
; 	entry = map_lookup_elem(map, tuple);
     431:	bf 81 00 00 00 00 00 00	r1 = r8
     432:	85 00 00 00 01 00 00 00	call 1
     433:	bf 09 00 00 00 00 00 00	r9 = r0
; 	if (entry) {
     434:	15 09 8e 00 00 00 00 00	if r9 == 0 goto +142 <LBB3_75>
; 		cilium_dbg(ctx, DBG_CT_MATCH, entry->lifetime, entry->rev_nat_index);
     435:	61 91 20 00 00 00 00 00	r1 = *(u32 *)(r9 + 32)
     436:	69 92 26 00 00 00 00 00	r2 = *(u16 *)(r9 + 38)
; 	struct debug_msg msg = {
     437:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
     439:	6b 3a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r3
     440:	b7 03 00 00 02 08 00 00	r3 = 2050
     441:	6b 3a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r3
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     442:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
     443:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
     444:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
     445:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
     446:	63 7a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r7
     447:	bf a4 00 00 00 00 00 00	r4 = r10
; 		cilium_dbg(ctx, DBG_CT_MATCH, entry->lifetime, entry->rev_nat_index);
     448:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     449:	bf 61 00 00 00 00 00 00	r1 = r6
     450:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     452:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     454:	b7 05 00 00 14 00 00 00	r5 = 20
     455:	85 00 00 00 19 00 00 00	call 25
; 	return !entry->rx_closing || !entry->tx_closing;
     456:	69 91 24 00 00 00 00 00	r1 = *(u16 *)(r9 + 36)
     457:	bf 12 00 00 00 00 00 00	r2 = r1
     458:	57 02 00 00 03 00 00 00	r2 &= 3
     459:	b7 08 00 00 00 00 00 00	r8 = 0
     460:	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 240)
; 		if (ct_entry_alive(entry))
     461:	15 02 24 00 03 00 00 00	if r2 == 3 goto +36 <LBB3_66>
     462:	b7 06 00 00 3c 00 00 00	r6 = 60
     463:	79 a4 28 ff 00 00 00 00	r4 = *(u64 *)(r10 - 216)
; 	if (tcp) {
     464:	55 04 0d 00 06 00 00 00	if r4 != 6 goto +13 <LBB3_63>
     465:	bf 72 00 00 00 00 00 00	r2 = r7
     466:	67 02 00 00 03 00 00 00	r2 <<= 3
     467:	a7 02 00 00 ff ff ff ff	r2 ^= -1
; 		entry->seen_non_syn |= !syn;
     468:	bf 13 00 00 00 00 00 00	r3 = r1
     469:	4f 23 00 00 00 00 00 00	r3 |= r2
     470:	57 03 00 00 10 00 00 00	r3 &= 16
     471:	57 01 00 00 ef ff 00 00	r1 &= 65519
     472:	bf 32 00 00 00 00 00 00	r2 = r3
     473:	4f 12 00 00 00 00 00 00	r2 |= r1
     474:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     475:	b7 06 00 00 3c 00 00 00	r6 = 60
     476:	15 03 01 00 00 00 00 00	if r3 == 0 goto +1 <LBB3_63>
     477:	b7 06 00 00 60 54 00 00	r6 = 21600

0000000000000ef0 <LBB3_63>:
; 	__u32 now = bpf_mono_now();
     478:	85 00 00 00 05 00 00 00	call 5
     479:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
     480:	0f 06 00 00 00 00 00 00	r6 += r0
     481:	63 69 20 00 00 00 00 00	*(u32 *)(r9 + 32) = r6
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
     482:	71 93 2a 00 00 00 00 00	r3 = *(u8 *)(r9 + 42)
; 		last_report = READ_ONCE(entry->last_tx_report);
     483:	61 92 30 00 00 00 00 00	r2 = *(u32 *)(r9 + 48)
; 	seen_flags |= accumulated_flags;
     484:	bf 31 00 00 00 00 00 00	r1 = r3
     485:	4f 71 00 00 00 00 00 00	r1 |= r7
     486:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     487:	5d 13 07 00 00 00 00 00	if r3 != r1 goto +7 <LBB3_65>
     488:	07 02 00 00 05 00 00 00	r2 += 5
     489:	bf 03 00 00 00 00 00 00	r3 = r0
     490:	67 03 00 00 20 00 00 00	r3 <<= 32
     491:	77 03 00 00 20 00 00 00	r3 >>= 32
     492:	67 02 00 00 20 00 00 00	r2 <<= 32
     493:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     494:	3d 32 03 00 00 00 00 00	if r2 >= r3 goto +3 <LBB3_66>

0000000000000f78 <LBB3_65>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
     495:	73 19 2a 00 00 00 00 00	*(u8 *)(r9 + 42) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
     496:	63 09 30 00 00 00 00 00	*(u32 *)(r9 + 48) = r0
     497:	b7 08 00 00 80 00 00 00	r8 = 128

0000000000000f90 <LBB3_66>:
; 			ct_state->rev_nat_index = entry->rev_nat_index;
     498:	69 91 26 00 00 00 00 00	r1 = *(u16 *)(r9 + 38)
     499:	6b 1a 68 ff 00 00 00 00	*(u16 *)(r10 - 152) = r1
; 			ct_state->loopback = entry->lb_loopback;
     500:	69 91 24 00 00 00 00 00	r1 = *(u16 *)(r9 + 36)
; 			ct_state->ifindex = entry->ifindex;
     501:	69 92 28 00 00 00 00 00	r2 = *(u16 *)(r9 + 40)
     502:	6b 2a 78 ff 00 00 00 00	*(u16 *)(r10 - 136) = r2
; 			ct_state->loopback = entry->lb_loopback;
     503:	69 a2 6a ff 00 00 00 00	r2 = *(u16 *)(r10 - 150)
     504:	57 02 00 00 f0 ff 00 00	r2 &= 65520
     505:	bf 13 00 00 00 00 00 00	r3 = r1
     506:	77 03 00 00 03 00 00 00	r3 >>= 3
     507:	57 03 00 00 01 00 00 00	r3 &= 1
     508:	4f 32 00 00 00 00 00 00	r2 |= r3
; 			ct_state->node_port = entry->node_port;
     509:	77 01 00 00 04 00 00 00	r1 >>= 4
     510:	bf 13 00 00 00 00 00 00	r3 = r1
     511:	57 03 00 00 02 00 00 00	r3 &= 2
     512:	4f 32 00 00 00 00 00 00	r2 |= r3
; 			ct_state->dsr = entry->dsr;
     513:	57 01 00 00 0c 00 00 00	r1 &= 12
; 			ct_state->proxy_redirect = entry->proxy_redirect;
     514:	4f 12 00 00 00 00 00 00	r2 |= r1
     515:	6b 2a 6a ff 00 00 00 00	*(u16 *)(r10 - 150) = r2
     516:	b7 01 00 00 01 00 00 00	r1 = 1
; 			__sync_fetch_and_add(&entry->tx_packets, 1);
     517:	db 19 10 00 00 00 00 00	lock *(u64 *)(r9 + 16) += r1
; 	return ctx->len;
     518:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 			__sync_fetch_and_add(&entry->tx_bytes, ctx_full_len(ctx));
     519:	db 19 18 00 00 00 00 00	lock *(u64 *)(r9 + 24) += r1
     520:	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 232)
; 		switch (action) {
     521:	67 01 00 00 20 00 00 00	r1 <<= 32
     522:	77 01 00 00 20 00 00 00	r1 >>= 32
     523:	15 01 e3 00 02 00 00 00	if r1 == 2 goto +227 <LBB3_94>
     524:	55 01 00 01 01 00 00 00	if r1 != 1 goto +256 <LBB3_100>
; 			reopen = entry->rx_closing | entry->tx_closing;
     525:	69 91 24 00 00 00 00 00	r1 = *(u16 *)(r9 + 36)
     526:	bf 12 00 00 00 00 00 00	r2 = r1
     527:	77 02 00 00 01 00 00 00	r2 >>= 1
     528:	4f 12 00 00 00 00 00 00	r2 |= r1
     529:	57 02 00 00 01 00 00 00	r2 &= 1
; 			reopen |= seen_flags.value & TCP_FLAG_SYN;
     530:	bf 73 00 00 00 00 00 00	r3 = r7
     531:	67 03 00 00 08 00 00 00	r3 <<= 8
     532:	57 03 00 00 00 02 00 00	r3 &= 512
     533:	4f 23 00 00 00 00 00 00	r3 |= r2
; 			if (unlikely(reopen == (TCP_FLAG_SYN|0x1))) {
     534:	55 03 f6 00 01 02 00 00	if r3 != 513 goto +246 <LBB3_100>
; 	entry->tx_closing = 0;
     535:	bf 12 00 00 00 00 00 00	r2 = r1
     536:	57 02 00 00 fc ff 00 00	r2 &= 65532
     537:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     538:	b7 06 00 00 3c 00 00 00	r6 = 60
; 	if (tcp) {
     539:	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 216)
     540:	55 02 0d 00 06 00 00 00	if r2 != 6 goto +13 <LBB3_72>
     541:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
     542:	67 02 00 00 03 00 00 00	r2 <<= 3
     543:	a7 02 00 00 ff ff ff ff	r2 ^= -1
; 		entry->seen_non_syn |= !syn;
     544:	bf 13 00 00 00 00 00 00	r3 = r1
     545:	4f 23 00 00 00 00 00 00	r3 |= r2
     546:	57 03 00 00 10 00 00 00	r3 &= 16
     547:	57 01 00 00 ec ff 00 00	r1 &= 65516
     548:	bf 32 00 00 00 00 00 00	r2 = r3
     549:	4f 12 00 00 00 00 00 00	r2 |= r1
     550:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     551:	b7 06 00 00 3c 00 00 00	r6 = 60
     552:	15 03 01 00 00 00 00 00	if r3 == 0 goto +1 <LBB3_72>
     553:	b7 06 00 00 60 54 00 00	r6 = 21600

0000000000001150 <LBB3_72>:
; 	__u32 now = bpf_mono_now();
     554:	85 00 00 00 05 00 00 00	call 5
     555:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
     556:	0f 06 00 00 00 00 00 00	r6 += r0
     557:	63 69 20 00 00 00 00 00	*(u32 *)(r9 + 32) = r6
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
     558:	71 93 2a 00 00 00 00 00	r3 = *(u8 *)(r9 + 42)
; 		last_report = READ_ONCE(entry->last_tx_report);
     559:	61 92 30 00 00 00 00 00	r2 = *(u32 *)(r9 + 48)
; 	seen_flags |= accumulated_flags;
     560:	bf 31 00 00 00 00 00 00	r1 = r3
     561:	79 a4 10 ff 00 00 00 00	r4 = *(u64 *)(r10 - 240)
     562:	4f 41 00 00 00 00 00 00	r1 |= r4
     563:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     564:	5d 13 08 00 00 00 00 00	if r3 != r1 goto +8 <LBB3_74>
     565:	b7 08 00 00 00 00 00 00	r8 = 0
     566:	07 02 00 00 05 00 00 00	r2 += 5
     567:	bf 03 00 00 00 00 00 00	r3 = r0
     568:	67 03 00 00 20 00 00 00	r3 <<= 32
     569:	77 03 00 00 20 00 00 00	r3 >>= 32
     570:	67 02 00 00 20 00 00 00	r2 <<= 32
     571:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     572:	3d 32 d0 00 00 00 00 00	if r2 >= r3 goto +208 <LBB3_100>

00000000000011e8 <LBB3_74>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
     573:	73 19 2a 00 00 00 00 00	*(u8 *)(r9 + 42) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
     574:	63 09 30 00 00 00 00 00	*(u32 *)(r9 + 48) = r0
     575:	b7 08 00 00 80 00 00 00	r8 = 128
; 	barrier();
     576:	05 00 cc 00 00 00 00 00	goto +204 <LBB3_100>

0000000000001208 <LBB3_75>:
; 	if (tuple->flags & TUPLE_F_IN)
     577:	71 a2 95 ff 00 00 00 00	r2 = *(u8 *)(r10 - 107)
     578:	bf 24 00 00 00 00 00 00	r4 = r2
     579:	47 04 00 00 01 00 00 00	r4 |= 1
     580:	bf 23 00 00 00 00 00 00	r3 = r2
     581:	57 03 00 00 01 00 00 00	r3 &= 1
     582:	15 03 02 00 00 00 00 00	if r3 == 0 goto +2 <LBB3_77>
     583:	57 02 00 00 fe 00 00 00	r2 &= 254
; 	if (tuple->flags & TUPLE_F_IN)
     584:	bf 24 00 00 00 00 00 00	r4 = r2

0000000000001248 <LBB3_77>:
; 	__be32 tmp_addr = tuple->saddr;
     585:	61 a2 8c ff 00 00 00 00	r2 = *(u32 *)(r10 - 116)
; 	tuple->saddr = tuple->daddr;
     586:	61 a3 88 ff 00 00 00 00	r3 = *(u32 *)(r10 - 120)
     587:	63 3a 8c ff 00 00 00 00	*(u32 *)(r10 - 116) = r3
; 	tuple->daddr = tmp_addr;
     588:	63 2a 88 ff 00 00 00 00	*(u32 *)(r10 - 120) = r2
; 	tmp = tuple->sport;
     589:	69 a2 92 ff 00 00 00 00	r2 = *(u16 *)(r10 - 110)
; 	tuple->sport = tuple->dport;
     590:	69 a3 90 ff 00 00 00 00	r3 = *(u16 *)(r10 - 112)
     591:	6b 3a 92 ff 00 00 00 00	*(u16 *)(r10 - 110) = r3
; 	tuple->dport = tmp;
     592:	6b 2a 90 ff 00 00 00 00	*(u16 *)(r10 - 112) = r2
     593:	73 4a 95 ff 00 00 00 00	*(u8 *)(r10 - 107) = r4
     594:	71 a2 f9 ff 00 00 00 00	r2 = *(u8 *)(r10 - 7)
; 	entry = map_lookup_elem(map, tuple);
     595:	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 240) = r2
     596:	bf a2 00 00 00 00 00 00	r2 = r10
; 	__be32 tmp_addr = tuple->saddr;
     597:	07 02 00 00 88 ff ff ff	r2 += -120
; 	entry = map_lookup_elem(map, tuple);
     598:	bf 81 00 00 00 00 00 00	r1 = r8
     599:	85 00 00 00 01 00 00 00	call 1
     600:	bf 09 00 00 00 00 00 00	r9 = r0
     601:	b7 07 00 00 00 00 00 00	r7 = 0
     602:	b7 08 00 00 80 00 00 00	r8 = 128
     603:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	if (entry) {
     604:	15 09 b5 00 00 00 00 00	if r9 == 0 goto +181 <LBB3_102>
; 		cilium_dbg(ctx, DBG_CT_MATCH, entry->lifetime, entry->rev_nat_index);
     605:	61 91 20 00 00 00 00 00	r1 = *(u32 *)(r9 + 32)
     606:	69 92 26 00 00 00 00 00	r2 = *(u16 *)(r9 + 38)
; 	struct debug_msg msg = {
     607:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
     609:	6b 3a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r3
     610:	b7 03 00 00 02 08 00 00	r3 = 2050
     611:	6b 3a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r3
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     612:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
     613:	b7 04 00 00 00 00 00 00	r4 = 0
; 	struct debug_msg msg = {
     614:	63 4a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r4
     615:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
     616:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
     617:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
     618:	bf a4 00 00 00 00 00 00	r4 = r10
; 		cilium_dbg(ctx, DBG_CT_MATCH, entry->lifetime, entry->rev_nat_index);
     619:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     620:	bf 61 00 00 00 00 00 00	r1 = r6
     621:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     623:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     625:	b7 05 00 00 14 00 00 00	r5 = 20
     626:	85 00 00 00 19 00 00 00	call 25
; 	return !entry->rx_closing || !entry->tx_closing;
     627:	69 91 24 00 00 00 00 00	r1 = *(u16 *)(r9 + 36)
     628:	bf 12 00 00 00 00 00 00	r2 = r1
     629:	57 02 00 00 03 00 00 00	r2 &= 3
     630:	b7 08 00 00 80 00 00 00	r8 = 128
; 		if (ct_entry_alive(entry))
     631:	15 02 26 00 03 00 00 00	if r2 == 3 goto +38 <LBB3_85>
     632:	b7 06 00 00 3c 00 00 00	r6 = 60
     633:	79 a4 28 ff 00 00 00 00	r4 = *(u64 *)(r10 - 216)
; 	if (tcp) {
     634:	55 04 0d 00 06 00 00 00	if r4 != 6 goto +13 <LBB3_82>
     635:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
     636:	67 02 00 00 03 00 00 00	r2 <<= 3
     637:	a7 02 00 00 ff ff ff ff	r2 ^= -1
; 		entry->seen_non_syn |= !syn;
     638:	bf 13 00 00 00 00 00 00	r3 = r1
     639:	4f 23 00 00 00 00 00 00	r3 |= r2
     640:	57 03 00 00 10 00 00 00	r3 &= 16
     641:	57 01 00 00 ef ff 00 00	r1 &= 65519
     642:	bf 32 00 00 00 00 00 00	r2 = r3
     643:	4f 12 00 00 00 00 00 00	r2 |= r1
     644:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     645:	b7 06 00 00 3c 00 00 00	r6 = 60
     646:	15 03 01 00 00 00 00 00	if r3 == 0 goto +1 <LBB3_82>
     647:	b7 06 00 00 60 54 00 00	r6 = 21600

0000000000001440 <LBB3_82>:
; 	__u32 now = bpf_mono_now();
     648:	85 00 00 00 05 00 00 00	call 5
     649:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
     650:	0f 06 00 00 00 00 00 00	r6 += r0
     651:	63 69 20 00 00 00 00 00	*(u32 *)(r9 + 32) = r6
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
     652:	71 93 2a 00 00 00 00 00	r3 = *(u8 *)(r9 + 42)
; 		last_report = READ_ONCE(entry->last_tx_report);
     653:	61 92 30 00 00 00 00 00	r2 = *(u32 *)(r9 + 48)
; 	seen_flags |= accumulated_flags;
     654:	bf 31 00 00 00 00 00 00	r1 = r3
     655:	79 a4 10 ff 00 00 00 00	r4 = *(u64 *)(r10 - 240)
     656:	4f 41 00 00 00 00 00 00	r1 |= r4
     657:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     658:	5d 13 08 00 00 00 00 00	if r3 != r1 goto +8 <LBB3_84>
     659:	b7 08 00 00 00 00 00 00	r8 = 0
     660:	07 02 00 00 05 00 00 00	r2 += 5
     661:	bf 03 00 00 00 00 00 00	r3 = r0
     662:	67 03 00 00 20 00 00 00	r3 <<= 32
     663:	77 03 00 00 20 00 00 00	r3 >>= 32
     664:	67 02 00 00 20 00 00 00	r2 <<= 32
     665:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     666:	3d 32 03 00 00 00 00 00	if r2 >= r3 goto +3 <LBB3_85>

00000000000014d8 <LBB3_84>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
     667:	73 19 2a 00 00 00 00 00	*(u8 *)(r9 + 42) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
     668:	63 09 30 00 00 00 00 00	*(u32 *)(r9 + 48) = r0
     669:	b7 08 00 00 80 00 00 00	r8 = 128

00000000000014f0 <LBB3_85>:
; 			ct_state->rev_nat_index = entry->rev_nat_index;
     670:	69 91 26 00 00 00 00 00	r1 = *(u16 *)(r9 + 38)
     671:	6b 1a 68 ff 00 00 00 00	*(u16 *)(r10 - 152) = r1
; 			ct_state->loopback = entry->lb_loopback;
     672:	69 a1 6a ff 00 00 00 00	r1 = *(u16 *)(r10 - 150)
     673:	57 01 00 00 f0 ff 00 00	r1 &= 65520
     674:	69 92 24 00 00 00 00 00	r2 = *(u16 *)(r9 + 36)
     675:	bf 23 00 00 00 00 00 00	r3 = r2
     676:	77 03 00 00 03 00 00 00	r3 >>= 3
     677:	57 03 00 00 01 00 00 00	r3 &= 1
     678:	4f 31 00 00 00 00 00 00	r1 |= r3
; 			ct_state->ifindex = entry->ifindex;
     679:	69 93 28 00 00 00 00 00	r3 = *(u16 *)(r9 + 40)
     680:	6b 3a 78 ff 00 00 00 00	*(u16 *)(r10 - 136) = r3
; 			ct_state->node_port = entry->node_port;
     681:	77 02 00 00 04 00 00 00	r2 >>= 4
     682:	bf 23 00 00 00 00 00 00	r3 = r2
     683:	57 03 00 00 02 00 00 00	r3 &= 2
     684:	4f 31 00 00 00 00 00 00	r1 |= r3
; 			ct_state->dsr = entry->dsr;
     685:	57 02 00 00 0c 00 00 00	r2 &= 12
; 			ct_state->proxy_redirect = entry->proxy_redirect;
     686:	4f 21 00 00 00 00 00 00	r1 |= r2
     687:	6b 1a 6a ff 00 00 00 00	*(u16 *)(r10 - 150) = r1
     688:	b7 07 00 00 01 00 00 00	r7 = 1
; 			__sync_fetch_and_add(&entry->tx_packets, 1);
     689:	b7 01 00 00 01 00 00 00	r1 = 1
     690:	db 19 10 00 00 00 00 00	lock *(u64 *)(r9 + 16) += r1
; 	return ctx->len;
     691:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 			__sync_fetch_and_add(&entry->tx_bytes, ctx_full_len(ctx));
     692:	db 19 18 00 00 00 00 00	lock *(u64 *)(r9 + 24) += r1
     693:	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 232)
; 		switch (action) {
     694:	67 01 00 00 20 00 00 00	r1 <<= 32
     695:	77 01 00 00 20 00 00 00	r1 >>= 32
     696:	15 01 7b 01 02 00 00 00	if r1 == 2 goto +379 <LBB3_133>
     697:	55 01 58 00 01 00 00 00	if r1 != 1 goto +88 <LBB3_102>
; 			reopen = entry->rx_closing | entry->tx_closing;
     698:	69 91 24 00 00 00 00 00	r1 = *(u16 *)(r9 + 36)
     699:	bf 12 00 00 00 00 00 00	r2 = r1
     700:	77 02 00 00 01 00 00 00	r2 >>= 1
     701:	4f 12 00 00 00 00 00 00	r2 |= r1
     702:	57 02 00 00 01 00 00 00	r2 &= 1
; 			reopen |= seen_flags.value & TCP_FLAG_SYN;
     703:	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 240)
     704:	67 03 00 00 08 00 00 00	r3 <<= 8
     705:	57 03 00 00 00 02 00 00	r3 &= 512
     706:	4f 23 00 00 00 00 00 00	r3 |= r2
; 			if (unlikely(reopen == (TCP_FLAG_SYN|0x1))) {
     707:	55 03 4e 00 01 02 00 00	if r3 != 513 goto +78 <LBB3_102>
; 	entry->tx_closing = 0;
     708:	bf 12 00 00 00 00 00 00	r2 = r1
     709:	57 02 00 00 fc ff 00 00	r2 &= 65532
     710:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     711:	b7 06 00 00 3c 00 00 00	r6 = 60
; 	if (tcp) {
     712:	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 216)
     713:	55 02 0d 00 06 00 00 00	if r2 != 6 goto +13 <LBB3_91>
     714:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
     715:	67 02 00 00 03 00 00 00	r2 <<= 3
     716:	a7 02 00 00 ff ff ff ff	r2 ^= -1
; 		entry->seen_non_syn |= !syn;
     717:	bf 13 00 00 00 00 00 00	r3 = r1
     718:	4f 23 00 00 00 00 00 00	r3 |= r2
     719:	57 03 00 00 10 00 00 00	r3 &= 16
     720:	57 01 00 00 ec ff 00 00	r1 &= 65516
     721:	bf 32 00 00 00 00 00 00	r2 = r3
     722:	4f 12 00 00 00 00 00 00	r2 |= r1
     723:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     724:	b7 06 00 00 3c 00 00 00	r6 = 60
     725:	15 03 01 00 00 00 00 00	if r3 == 0 goto +1 <LBB3_91>
     726:	b7 06 00 00 60 54 00 00	r6 = 21600

00000000000016b8 <LBB3_91>:
; 	__u32 now = bpf_mono_now();
     727:	85 00 00 00 05 00 00 00	call 5
     728:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
     729:	0f 06 00 00 00 00 00 00	r6 += r0
     730:	63 69 20 00 00 00 00 00	*(u32 *)(r9 + 32) = r6
     731:	b7 07 00 00 04 00 00 00	r7 = 4
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
     732:	71 93 2a 00 00 00 00 00	r3 = *(u8 *)(r9 + 42)
; 		last_report = READ_ONCE(entry->last_tx_report);
     733:	61 92 30 00 00 00 00 00	r2 = *(u32 *)(r9 + 48)
; 	seen_flags |= accumulated_flags;
     734:	bf 31 00 00 00 00 00 00	r1 = r3
     735:	79 a4 10 ff 00 00 00 00	r4 = *(u64 *)(r10 - 240)
     736:	4f 41 00 00 00 00 00 00	r1 |= r4
     737:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     738:	5d 13 08 00 00 00 00 00	if r3 != r1 goto +8 <LBB3_93>
     739:	b7 08 00 00 00 00 00 00	r8 = 0
     740:	07 02 00 00 05 00 00 00	r2 += 5
     741:	bf 03 00 00 00 00 00 00	r3 = r0
     742:	67 03 00 00 20 00 00 00	r3 <<= 32
     743:	77 03 00 00 20 00 00 00	r3 >>= 32
     744:	67 02 00 00 20 00 00 00	r2 <<= 32
     745:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     746:	3d 32 27 00 00 00 00 00	if r2 >= r3 goto +39 <LBB3_102>

0000000000001758 <LBB3_93>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
     747:	73 19 2a 00 00 00 00 00	*(u8 *)(r9 + 42) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
     748:	63 09 30 00 00 00 00 00	*(u32 *)(r9 + 48) = r0
     749:	b7 08 00 00 80 00 00 00	r8 = 128
; 	barrier();
     750:	05 00 23 00 00 00 00 00	goto +35 <LBB3_102>

0000000000001778 <LBB3_94>:
; 			    (seen_flags.value & TCP_FLAG_RST) &&
     751:	bf 72 00 00 00 00 00 00	r2 = r7
     752:	57 02 00 00 04 00 00 00	r2 &= 4
     753:	b7 01 00 00 02 00 00 00	r1 = 2
     754:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB3_96>
     755:	b7 01 00 00 03 00 00 00	r1 = 3

00000000000017a0 <LBB3_96>:
     756:	69 92 24 00 00 00 00 00	r2 = *(u16 *)(r9 + 36)
; 			    (seen_flags.value & TCP_FLAG_RST) &&
     757:	4f 12 00 00 00 00 00 00	r2 |= r1
     758:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
     759:	b7 08 00 00 80 00 00 00	r8 = 128
; 	return !entry->rx_closing || !entry->tx_closing;
     760:	57 02 00 00 03 00 00 00	r2 &= 3
; 			if (ct_entry_alive(entry))
     761:	55 02 13 00 03 00 00 00	if r2 != 3 goto +19 <LBB3_100>
; 	__u32 now = bpf_mono_now();
     762:	85 00 00 00 05 00 00 00	call 5
     763:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
     764:	bf 01 00 00 00 00 00 00	r1 = r0
     765:	07 01 00 00 0a 00 00 00	r1 += 10
     766:	63 19 20 00 00 00 00 00	*(u32 *)(r9 + 32) = r1
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
     767:	71 93 2a 00 00 00 00 00	r3 = *(u8 *)(r9 + 42)
; 		last_report = READ_ONCE(entry->last_tx_report);
     768:	61 92 30 00 00 00 00 00	r2 = *(u32 *)(r9 + 48)
; 	seen_flags |= accumulated_flags;
     769:	bf 31 00 00 00 00 00 00	r1 = r3
     770:	4f 71 00 00 00 00 00 00	r1 |= r7
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     771:	5d 13 07 00 00 00 00 00	if r3 != r1 goto +7 <LBB3_99>
     772:	07 02 00 00 05 00 00 00	r2 += 5
     773:	bf 03 00 00 00 00 00 00	r3 = r0
     774:	67 03 00 00 20 00 00 00	r3 <<= 32
     775:	77 03 00 00 20 00 00 00	r3 >>= 32
     776:	67 02 00 00 20 00 00 00	r2 <<= 32
     777:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
     778:	3d 32 02 00 00 00 00 00	if r2 >= r3 goto +2 <LBB3_100>

0000000000001858 <LBB3_99>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
     779:	73 19 2a 00 00 00 00 00	*(u8 *)(r9 + 42) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
     780:	63 09 30 00 00 00 00 00	*(u32 *)(r9 + 48) = r0

0000000000001868 <LBB3_100>:
; 			if (unlikely(tuple->flags & TUPLE_F_RELATED))
     781:	71 a1 95 ff 00 00 00 00	r1 = *(u8 *)(r10 - 107)
     782:	57 01 00 00 02 00 00 00	r1 &= 2
     783:	b7 07 00 00 02 00 00 00	r7 = 2
     784:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_102>
     785:	b7 07 00 00 03 00 00 00	r7 = 3

0000000000001890 <LBB3_102>:
; 	cilium_dbg(ctx, DBG_CT_VERDICT, ret < 0 ? -ret : ret, ct_state->rev_nat_index);
     786:	69 a1 68 ff 00 00 00 00	r1 = *(u16 *)(r10 - 152)
; 	struct debug_msg msg = {
     787:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     789:	6b 2a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r2
     790:	b7 02 00 00 02 0f 00 00	r2 = 3842
     791:	6b 2a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r2
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     792:	61 62 44 00 00 00 00 00	r2 = *(u32 *)(r6 + 68)
     793:	b7 03 00 00 00 00 00 00	r3 = 0
; 	struct debug_msg msg = {
     794:	63 3a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r3
     795:	63 1a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r1
     796:	63 2a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r2
     797:	63 7a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r7
     798:	bf a4 00 00 00 00 00 00	r4 = r10
     799:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     800:	bf 61 00 00 00 00 00 00	r1 = r6
     801:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     803:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     805:	b7 05 00 00 14 00 00 00	r5 = 20
     806:	85 00 00 00 19 00 00 00	call 25
     807:	b7 02 00 00 dc 05 00 00	r2 = 1500
; 	if (conn_is_dns(tuple->dport))
     808:	69 a1 90 ff 00 00 00 00	r1 = *(u16 *)(r10 - 112)
     809:	15 01 01 00 00 35 00 00	if r1 == 13568 goto +1 <LBB3_104>
     810:	bf 82 00 00 00 00 00 00	r2 = r8

0000000000001958 <LBB3_104>:
; 	if ((ret == CT_REPLY || ret == CT_RELATED) && ct_state.proxy_redirect) {
     811:	bf 76 00 00 00 00 00 00	r6 = r7
     812:	47 06 00 00 01 00 00 00	r6 |= 1
     813:	bf 61 00 00 00 00 00 00	r1 = r6
     814:	67 01 00 00 20 00 00 00	r1 <<= 32
     815:	77 01 00 00 20 00 00 00	r1 >>= 32
     816:	79 a9 38 ff 00 00 00 00	r9 = *(u64 *)(r10 - 200)
     817:	15 01 01 00 03 00 00 00	if r1 == 3 goto +1 <LBB3_105>
     818:	05 00 1f 00 00 00 00 00	goto +31 <LBB3_107>

0000000000001998 <LBB3_105>:
     819:	69 a1 6a ff 00 00 00 00	r1 = *(u16 *)(r10 - 150)
     820:	57 01 00 00 04 00 00 00	r1 &= 4
     821:	15 01 1c 00 00 00 00 00	if r1 == 0 goto +28 <LBB3_107>
     822:	b7 01 00 00 00 02 00 00	r1 = 512
     823:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 		ctx->mark = MARK_MAGIC_TO_PROXY | proxy_port << 16;
     824:	63 16 08 00 00 00 00 00	*(u32 *)(r6 + 8) = r1
; 	struct debug_msg msg = {
     825:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     827:	6b 1a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r1
     828:	b7 01 00 00 02 08 00 00	r1 = 2050
     829:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     830:	61 61 44 00 00 00 00 00	r1 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
     831:	63 1a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r1
     832:	b7 01 00 00 00 00 00 00	r1 = 0
     833:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
     834:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
     835:	bf a4 00 00 00 00 00 00	r4 = r10
     836:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     837:	bf 61 00 00 00 00 00 00	r1 = r6
     838:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     840:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     842:	b7 05 00 00 14 00 00 00	r5 = 20
     843:	85 00 00 00 19 00 00 00	call 25
; 	ctx_change_type(ctx, PACKET_HOST); /* Required for ingress packets from overlay */
     844:	bf 61 00 00 00 00 00 00	r1 = r6
     845:	b7 02 00 00 00 00 00 00	r2 = 0
     846:	85 00 00 00 20 00 00 00	call 32
     847:	b7 04 00 00 00 00 00 00	r4 = 0
     848:	b7 09 00 00 00 00 00 00	r9 = 0
     849:	05 00 f1 03 00 00 00 00	goto +1009 <LBB3_244>

0000000000001a90 <LBB3_107>:
     850:	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 240) = r2
     851:	7b 7a 28 ff 00 00 00 00	*(u64 *)(r10 - 216) = r7
; 		.ip4 = addr,
     852:	63 9a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r9
     853:	18 01 00 00 40 00 00 00 00 00 00 00 00 00 00 01	r1 = 72057594037928000 ll
; 		.lpm_key = { IPCACHE_PREFIX_LEN(prefix), {} },
     855:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
     856:	b7 02 00 00 00 00 00 00	r2 = 0
; 		.ip4 = addr,
     857:	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r2
     858:	b7 01 00 00 00 00 00 00	r1 = 0
     859:	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 232) = r1
     860:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
     861:	bf a2 00 00 00 00 00 00	r2 = r10
     862:	07 02 00 00 98 ff ff ff	r2 += -104
; 	return map_lookup_elem(map, &key);
     863:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     865:	85 00 00 00 01 00 00 00	call 1
     866:	bf 08 00 00 00 00 00 00	r8 = r0
     867:	b7 04 00 00 02 00 00 00	r4 = 2
; 		if (info != NULL && info->sec_label) {
     868:	15 08 0c 00 00 00 00 00	if r8 == 0 goto +12 <LBB3_110>
     869:	61 87 00 00 00 00 00 00	r7 = *(u32 *)(r8 + 0)
     870:	15 07 0a 00 00 00 00 00	if r7 == 0 goto +10 <LBB3_110>
; 			tunnel_endpoint = info->tunnel_endpoint;
     871:	61 81 04 00 00 00 00 00	r1 = *(u32 *)(r8 + 4)
     872:	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 232) = r1
     873:	b7 01 00 00 00 00 00 00	r1 = 0
; 	struct encrypt_key key = {.ctx = ctx};
     874:	63 1a 98 ff 00 00 00 00	*(u32 *)(r10 - 104) = r1
     875:	bf a2 00 00 00 00 00 00	r2 = r10
; 			tunnel_endpoint = info->tunnel_endpoint;
     876:	07 02 00 00 98 ff ff ff	r2 += -104
; 	cfg = map_lookup_elem(&ENCRYPT_MAP, &key);
     877:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     879:	85 00 00 00 01 00 00 00	call 1
     880:	bf 74 00 00 00 00 00 00	r4 = r7

0000000000001b88 <LBB3_110>:
     881:	b7 01 00 00 3a 00 00 00	r1 = 58
; 		cilium_dbg(ctx, info ? DBG_IP_ID_MAP_SUCCEED4 : DBG_IP_ID_MAP_FAILED4,
     882:	55 08 01 00 00 00 00 00	if r8 != 0 goto +1 <LBB3_112>
     883:	b7 01 00 00 38 00 00 00	r1 = 56

0000000000001ba0 <LBB3_112>:
; 	struct debug_msg msg = {
     884:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     886:	6b 2a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r2
     887:	b7 02 00 00 02 00 00 00	r2 = 2
     888:	73 2a 98 ff 00 00 00 00	*(u8 *)(r10 - 104) = r2
     889:	73 1a 99 ff 00 00 00 00	*(u8 *)(r10 - 103) = r1
     890:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     891:	61 13 44 00 00 00 00 00	r3 = *(u32 *)(r1 + 68)
     892:	b7 02 00 00 00 00 00 00	r2 = 0
; 	struct debug_msg msg = {
     893:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
     894:	7b 4a 40 ff 00 00 00 00	*(u64 *)(r10 - 192) = r4
     895:	63 4a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r4
     896:	63 9a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r9
     897:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
     898:	bf a4 00 00 00 00 00 00	r4 = r10
     899:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     900:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     902:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     904:	b7 05 00 00 14 00 00 00	r5 = 20
     905:	85 00 00 00 19 00 00 00	call 25
; 	return policy_can_egress(ctx, srcID, dstID, tuple->dport,
     906:	69 a9 90 ff 00 00 00 00	r9 = *(u16 *)(r10 - 112)
; 				 tuple->nexthdr, match_type, audited);
     907:	71 a7 94 ff 00 00 00 00	r7 = *(u8 *)(r10 - 108)
; 	if (srcID != HOST_ID && is_encap(dport, proto))
     908:	55 07 0b 00 11 00 00 00	if r7 != 17 goto +11 <LBB3_117>
     909:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     911:	67 01 00 00 20 00 00 00	r1 <<= 32
     912:	77 01 00 00 20 00 00 00	r1 >>= 32
; 	if (srcID != HOST_ID && is_encap(dport, proto))
     913:	15 01 06 00 01 00 00 00	if r1 == 1 goto +6 <LBB3_117>
     914:	18 08 00 00 56 ff ff ff 00 00 00 00 00 00 00 00	r8 = 4294967126 ll
     916:	b7 03 00 00 00 00 00 00	r3 = 0
; 		(dport == bpf_htons(PORT_UDP_VXLAN) ||
     917:	15 09 68 00 21 18 00 00	if r9 == 6177 goto +104 <LBB3_127>
     918:	15 09 67 00 12 b5 00 00	if r9 == 46354 goto +103 <LBB3_127>
     919:	15 09 66 00 17 c1 00 00	if r9 == 49431 goto +102 <LBB3_127>

0000000000001cc0 <LBB3_117>:
     920:	b7 01 00 00 01 00 00 00	r1 = 1
; 	struct policy_key key = {
     921:	73 1a df ff 00 00 00 00	*(u8 *)(r10 - 33) = r1
     922:	6b 9a dc ff 00 00 00 00	*(u16 *)(r10 - 36) = r9
     923:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
     924:	63 4a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r4
     925:	73 7a de ff 00 00 00 00	*(u8 *)(r10 - 34) = r7
; 	if (proto == IPPROTO_ICMP) {
     926:	55 07 17 00 01 00 00 00	if r7 != 1 goto +23 <LBB3_122>
     927:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
; 	return (void *)(unsigned long)ctx->data_end;
     928:	61 12 50 00 00 00 00 00	r2 = *(u32 *)(r1 + 80)
; 	return (void *)(unsigned long)ctx->data;
     929:	61 11 4c 00 00 00 00 00	r1 = *(u32 *)(r1 + 76)
; 	if (data + tot_len > data_end)
     930:	bf 13 00 00 00 00 00 00	r3 = r1
     931:	07 03 00 00 22 00 00 00	r3 += 34
     932:	2d 23 3e 00 00 00 00 00	if r3 > r2 goto +62 <LBB3_125>
; 	return ip4->ihl * 4;
     933:	71 12 0e 00 00 00 00 00	r2 = *(u8 *)(r1 + 14)
     934:	67 02 00 00 02 00 00 00	r2 <<= 2
     935:	57 02 00 00 3c 00 00 00	r2 &= 60
; 		off = ((void *)ip4 - data) + ipv4_hdrlen(ip4);
     936:	07 02 00 00 0e 00 00 00	r2 += 14
     937:	bf a3 00 00 00 00 00 00	r3 = r10
     938:	07 03 00 00 98 ff ff ff	r3 += -104
; 		if (ctx_load_bytes(ctx, off, &icmphdr, sizeof(icmphdr)) < 0)
     939:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
     940:	b7 04 00 00 08 00 00 00	r4 = 8
     941:	85 00 00 00 1a 00 00 00	call 26
     942:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
; 		if (ctx_load_bytes(ctx, off, &icmphdr, sizeof(icmphdr)) < 0)
     943:	67 00 00 00 20 00 00 00	r0 <<= 32
     944:	c7 00 00 00 20 00 00 00	r0 s>>= 32
     945:	c5 00 31 00 00 00 00 00	if r0 s< 0 goto +49 <LBB3_125>
; 		if (icmphdr.type == ICMP_DEST_UNREACH &&
     946:	71 a1 98 ff 00 00 00 00	r1 = *(u8 *)(r10 - 104)
     947:	55 01 02 00 03 00 00 00	if r1 != 3 goto +2 <LBB3_122>
; 		    icmphdr.code == ICMP_FRAG_NEEDED)
     948:	71 a1 99 ff 00 00 00 00	r1 = *(u8 *)(r10 - 103)
; 		if (icmphdr.type == ICMP_DEST_UNREACH &&
     949:	15 01 9e 00 04 00 00 00	if r1 == 4 goto +158 <LBB3_139>

0000000000001db0 <LBB3_122>:
     950:	bf a2 00 00 00 00 00 00	r2 = r10
; 		policy = map_lookup_elem(map, &key);
     951:	07 02 00 00 d8 ff ff ff	r2 += -40
     952:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     954:	85 00 00 00 01 00 00 00	call 1
     955:	bf 08 00 00 00 00 00 00	r8 = r0
; 		if (likely(policy)) {
     956:	15 08 9d 00 00 00 00 00	if r8 == 0 goto +157 <LBB3_141>
; 	struct debug_msg msg = {
     957:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     959:	6b 1a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r1
     960:	b7 01 00 00 02 37 00 00	r1 = 14082
     961:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
; 				    dport << 16 | proto);
     962:	67 09 00 00 10 00 00 00	r9 <<= 16
     963:	4f 79 00 00 00 00 00 00	r9 |= r7
     964:	79 a7 48 ff 00 00 00 00	r7 = *(u64 *)(r10 - 184)
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
     965:	61 71 44 00 00 00 00 00	r1 = *(u32 *)(r7 + 68)
; 	struct debug_msg msg = {
     966:	63 9a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r9
     967:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     969:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
     970:	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 192)
     971:	63 2a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r2
     972:	63 1a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r1
     973:	bf a4 00 00 00 00 00 00	r4 = r10
     974:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
     975:	bf 71 00 00 00 00 00 00	r1 = r7
     976:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
     978:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
     980:	b7 05 00 00 14 00 00 00	r5 = 20
     981:	85 00 00 00 19 00 00 00	call 25
     982:	b7 01 00 00 01 00 00 00	r1 = 1
; 	__sync_fetch_and_add(&policy->packets, 1);
     983:	db 18 08 00 00 00 00 00	lock *(u64 *)(r8 + 8) += r1
; 	return ctx->len;
     984:	61 71 00 00 00 00 00 00	r1 = *(u32 *)(r7 + 0)
; 	__sync_fetch_and_add(&policy->bytes, ctx_full_len(ctx));
     985:	db 18 10 00 00 00 00 00	lock *(u64 *)(r8 + 16) += r1
     986:	18 07 00 00 4b ff ff ff 00 00 00 00 00 00 00 00	r7 = 4294967115 ll
     988:	b7 03 00 00 02 00 00 00	r3 = 2
; 			if (unlikely(policy->deny))
     989:	71 81 02 00 00 00 00 00	r1 = *(u8 *)(r8 + 2)
     990:	57 01 00 00 01 00 00 00	r1 &= 1
     991:	55 01 a6 00 00 00 00 00	if r1 != 0 goto +166 <LBB3_146>
     992:	b7 03 00 00 02 00 00 00	r3 = 2
; 			return policy->proxy_port;
     993:	69 88 00 00 00 00 00 00	r8 = *(u16 *)(r8 + 0)
     994:	05 00 c1 00 00 00 00 00	goto +193 <LBB3_150>

0000000000001f18 <LBB3_125>:
     995:	18 07 00 00 7a ff ff ff 00 00 00 00 00 00 00 00	r7 = 4294967162 ll
     997:	b7 09 00 00 00 00 00 00	r9 = 0

0000000000001f30 <LBB3_126>:
; 	struct debug_msg msg = {
     998:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1000:	6b 1a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r1
    1001:	b7 01 00 00 02 05 00 00	r1 = 1282
    1002:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
    1003:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1004:	61 13 44 00 00 00 00 00	r3 = *(u32 *)(r1 + 68)
    1005:	b7 02 00 00 00 00 00 00	r2 = 0
; 	struct debug_msg msg = {
    1006:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    1007:	63 4a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r4
    1008:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1010:	63 2a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r2
    1011:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
    1012:	bf a4 00 00 00 00 00 00	r4 = r10
    1013:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1014:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1016:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1018:	b7 05 00 00 14 00 00 00	r5 = 20
    1019:	85 00 00 00 19 00 00 00	call 25
    1020:	bf 78 00 00 00 00 00 00	r8 = r7
    1021:	bf 93 00 00 00 00 00 00	r3 = r9

0000000000001ff0 <LBB3_127>:
; 	if ((ret == CT_REPLY || ret == CT_RELATED) && ct_state.proxy_redirect) {
    1022:	67 06 00 00 20 00 00 00	r6 <<= 32
    1023:	77 06 00 00 20 00 00 00	r6 >>= 32
    1024:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
; 	if (ret != CT_REPLY && ret != CT_RELATED && verdict < 0) {
    1025:	15 06 a4 00 03 00 00 00	if r6 == 3 goto +164 <LBB3_151>
    1026:	bf 37 00 00 00 00 00 00	r7 = r3
    1027:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	return ctx->len;
    1028:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 					   tuple.nexthdr, POLICY_EGRESS, 0,
    1029:	71 a4 94 ff 00 00 00 00	r4 = *(u8 *)(r10 - 108)
; 		send_policy_verdict_notify(ctx, *dstID, tuple.dport,
    1030:	69 a2 90 ff 00 00 00 00	r2 = *(u16 *)(r10 - 112)
    1031:	b7 03 00 00 02 00 00 00	r3 = 2
; 	volatile __u8 d = dir;
    1032:	73 3a 98 ff 00 00 00 00	*(u8 *)(r10 - 104) = r3
; 	return ((filter & d) > 0);
    1033:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    1035:	71 a5 98 ff 00 00 00 00	r5 = *(u8 *)(r10 - 104)
    1036:	5f 35 00 00 00 00 00 00	r5 &= r3
; 	__u64 cap_len = min_t(__u64, TRACE_PAYLOAD_LEN, ctx_len);
    1037:	bf 13 00 00 00 00 00 00	r3 = r1
    1038:	a5 01 01 00 80 00 00 00	if r1 < 128 goto +1 <LBB3_130>
    1039:	b7 03 00 00 80 00 00 00	r3 = 128

0000000000002080 <LBB3_130>:
; 	if (!policy_verdict_filter_allow(POLICY_VERDICT_LOG_FILTER, dir))
    1040:	15 05 21 00 00 00 00 00	if r5 == 0 goto +33 <LBB3_132>
; 		__notify_common_hdr(CILIUM_NOTIFY_POLICY_VERDICT, 0),
    1041:	61 65 44 00 00 00 00 00	r5 = *(u32 *)(r6 + 68)
    1042:	b7 00 00 00 00 00 00 00	r0 = 0
; 	msg = (typeof(msg)) {
    1043:	63 0a b4 ff 00 00 00 00	*(u32 *)(r10 - 76) = r0
    1044:	73 4a b2 ff 00 00 00 00	*(u8 *)(r10 - 78) = r4
    1045:	dc 02 00 00 10 00 00 00	r2 = be16 r2
    1046:	6b 2a b0 ff 00 00 00 00	*(u16 *)(r10 - 80) = r2
    1047:	63 8a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r8
    1048:	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 192)
    1049:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    1050:	b7 02 00 00 01 00 00 00	r2 = 1
    1051:	6b 2a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r2
    1052:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
    1053:	63 5a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r5
    1054:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1056:	6b 1a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r1
    1057:	b7 01 00 00 05 00 00 00	r1 = 5
    1058:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
    1059:	67 07 00 00 03 00 00 00	r7 <<= 3
    1060:	47 07 00 00 02 00 00 00	r7 |= 2
    1061:	73 7a b3 ff 00 00 00 00	*(u8 *)(r10 - 77) = r7
    1062:	6b 3a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r3
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1063:	67 03 00 00 20 00 00 00	r3 <<= 32
    1064:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1066:	4f 13 00 00 00 00 00 00	r3 |= r1
    1067:	bf a4 00 00 00 00 00 00	r4 = r10
; 		__notify_common_hdr(CILIUM_NOTIFY_POLICY_VERDICT, 0),
    1068:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP,
    1069:	bf 61 00 00 00 00 00 00	r1 = r6
    1070:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1072:	b7 05 00 00 20 00 00 00	r5 = 32
    1073:	85 00 00 00 19 00 00 00	call 25

0000000000002190 <LBB3_132>:
    1074:	bf 89 00 00 00 00 00 00	r9 = r8
    1075:	05 00 0e 03 00 00 00 00	goto +782 <LBB3_243>

00000000000021a0 <LBB3_133>:
; 			    (seen_flags.value & TCP_FLAG_RST) &&
    1076:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
    1077:	57 02 00 00 04 00 00 00	r2 &= 4
    1078:	b7 01 00 00 02 00 00 00	r1 = 2
    1079:	15 02 01 00 00 00 00 00	if r2 == 0 goto +1 <LBB3_135>
    1080:	b7 01 00 00 03 00 00 00	r1 = 3

00000000000021c8 <LBB3_135>:
    1081:	69 92 24 00 00 00 00 00	r2 = *(u16 *)(r9 + 36)
; 			    (seen_flags.value & TCP_FLAG_RST) &&
    1082:	4f 12 00 00 00 00 00 00	r2 |= r1
    1083:	6b 29 24 00 00 00 00 00	*(u16 *)(r9 + 36) = r2
    1084:	b7 08 00 00 80 00 00 00	r8 = 128
; 	return !entry->rx_closing || !entry->tx_closing;
    1085:	57 02 00 00 03 00 00 00	r2 &= 3
; 			if (ct_entry_alive(entry))
    1086:	55 02 d3 fe 03 00 00 00	if r2 != 3 goto -301 <LBB3_102>
; 	__u32 now = bpf_mono_now();
    1087:	85 00 00 00 05 00 00 00	call 5
    1088:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
    1089:	bf 01 00 00 00 00 00 00	r1 = r0
    1090:	07 01 00 00 0a 00 00 00	r1 += 10
    1091:	63 19 20 00 00 00 00 00	*(u32 *)(r9 + 32) = r1
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
    1092:	71 93 2a 00 00 00 00 00	r3 = *(u8 *)(r9 + 42)
; 		last_report = READ_ONCE(entry->last_tx_report);
    1093:	61 92 30 00 00 00 00 00	r2 = *(u32 *)(r9 + 48)
; 	seen_flags |= accumulated_flags;
    1094:	bf 31 00 00 00 00 00 00	r1 = r3
    1095:	79 a4 10 ff 00 00 00 00	r4 = *(u64 *)(r10 - 240)
    1096:	4f 41 00 00 00 00 00 00	r1 |= r4
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
    1097:	5d 13 07 00 00 00 00 00	if r3 != r1 goto +7 <LBB3_138>
    1098:	07 02 00 00 05 00 00 00	r2 += 5
    1099:	bf 03 00 00 00 00 00 00	r3 = r0
    1100:	67 03 00 00 20 00 00 00	r3 <<= 32
    1101:	77 03 00 00 20 00 00 00	r3 >>= 32
    1102:	67 02 00 00 20 00 00 00	r2 <<= 32
    1103:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
    1104:	3d 32 c1 fe 00 00 00 00	if r2 >= r3 goto -319 <LBB3_102>

0000000000002288 <LBB3_138>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
    1105:	73 19 2a 00 00 00 00 00	*(u8 *)(r9 + 42) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
    1106:	63 09 30 00 00 00 00 00	*(u32 *)(r9 + 48) = r0
; 	barrier();
    1107:	05 00 be fe 00 00 00 00	goto -322 <LBB3_102>

00000000000022a0 <LBB3_139>:
    1108:	b7 08 00 00 00 00 00 00	r8 = 0
    1109:	b7 03 00 00 00 00 00 00	r3 = 0
    1110:	05 00 4f 00 00 00 00 00	goto +79 <LBB3_151>

00000000000022b8 <LBB3_140>:
; 	case  4: __it_mob(d, s, 32);
    1111:	61 01 00 00 00 00 00 00	r1 = *(u32 *)(r0 + 0)
    1112:	63 1a 90 ff 00 00 00 00	*(u32 *)(r10 - 112) = r1
    1113:	05 00 17 fd 00 00 00 00	goto -745 <LBB3_55>

00000000000022d0 <LBB3_141>:
    1114:	b7 07 00 00 00 00 00 00	r7 = 0
; 		key.sec_label = 0;
    1115:	63 7a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r7
    1116:	bf a2 00 00 00 00 00 00	r2 = r10
    1117:	07 02 00 00 d8 ff ff ff	r2 += -40
; 		policy = map_lookup_elem(map, &key);
    1118:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1120:	85 00 00 00 01 00 00 00	call 1
; 		if (likely(policy)) {
    1121:	15 00 0e 00 00 00 00 00	if r0 == 0 goto +14 <LBB3_144>
    1122:	b7 01 00 00 01 00 00 00	r1 = 1
; 	__sync_fetch_and_add(&policy->packets, 1);
    1123:	db 10 08 00 00 00 00 00	lock *(u64 *)(r0 + 8) += r1
; 	return ctx->len;
    1124:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1125:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
; 	__sync_fetch_and_add(&policy->bytes, ctx_full_len(ctx));
    1126:	db 10 10 00 00 00 00 00	lock *(u64 *)(r0 + 16) += r1
    1127:	18 07 00 00 4b ff ff ff 00 00 00 00 00 00 00 00	r7 = 4294967115 ll
    1129:	b7 03 00 00 03 00 00 00	r3 = 3
; 			if (unlikely(policy->deny))
    1130:	71 01 02 00 00 00 00 00	r1 = *(u8 *)(r0 + 2)
    1131:	57 01 00 00 01 00 00 00	r1 &= 1
    1132:	55 01 19 00 00 00 00 00	if r1 != 0 goto +25 <LBB3_146>
    1133:	b7 03 00 00 03 00 00 00	r3 = 3
; 			return policy->proxy_port;
    1134:	69 08 00 00 00 00 00 00	r8 = *(u16 *)(r0 + 0)
    1135:	05 00 34 00 00 00 00 00	goto +52 <LBB3_150>

0000000000002380 <LBB3_144>:
; 	key.protocol = 0;
    1136:	73 7a de ff 00 00 00 00	*(u8 *)(r10 - 34) = r7
; 	key.dport = 0;
    1137:	6b 7a dc ff 00 00 00 00	*(u16 *)(r10 - 36) = r7
; 		key.sec_label = remoteID;
    1138:	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 192)
    1139:	63 1a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r1
    1140:	bf a2 00 00 00 00 00 00	r2 = r10
; 	key.protocol = 0;
    1141:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	policy = map_lookup_elem(map, &key);
    1142:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1144:	85 00 00 00 01 00 00 00	call 1
; 	if (likely(policy)) {
    1145:	15 00 0f 00 00 00 00 00	if r0 == 0 goto +15 <LBB3_147>
    1146:	b7 03 00 00 01 00 00 00	r3 = 1
; 	__sync_fetch_and_add(&policy->packets, 1);
    1147:	b7 01 00 00 01 00 00 00	r1 = 1
    1148:	db 10 08 00 00 00 00 00	lock *(u64 *)(r0 + 8) += r1
; 	return ctx->len;
    1149:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1150:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
; 	__sync_fetch_and_add(&policy->bytes, ctx_full_len(ctx));
    1151:	db 10 10 00 00 00 00 00	lock *(u64 *)(r0 + 16) += r1
    1152:	18 07 00 00 4b ff ff ff 00 00 00 00 00 00 00 00	r7 = 4294967115 ll
    1154:	b7 08 00 00 00 00 00 00	r8 = 0
; 		if (unlikely(policy->deny))
    1155:	71 01 02 00 00 00 00 00	r1 = *(u8 *)(r0 + 2)
    1156:	57 01 00 00 01 00 00 00	r1 &= 1
    1157:	15 01 1e 00 00 00 00 00	if r1 == 0 goto +30 <LBB3_150>

0000000000002430 <LBB3_146>:
    1158:	bf 39 00 00 00 00 00 00	r9 = r3
    1159:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
    1160:	05 00 5d ff 00 00 00 00	goto -163 <LBB3_126>

0000000000002448 <LBB3_147>:
    1161:	b7 08 00 00 00 00 00 00	r8 = 0
; 	key.sec_label = 0;
    1162:	63 8a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r8
    1163:	bf a2 00 00 00 00 00 00	r2 = r10
    1164:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	policy = map_lookup_elem(map, &key);
    1165:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1167:	85 00 00 00 01 00 00 00	call 1
; 	if (policy) {
    1168:	15 00 0c 00 00 00 00 00	if r0 == 0 goto +12 <LBB3_149>
    1169:	b7 01 00 00 01 00 00 00	r1 = 1
; 	__sync_fetch_and_add(&policy->packets, 1);
    1170:	db 10 08 00 00 00 00 00	lock *(u64 *)(r0 + 8) += r1
; 	return ctx->len;
    1171:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1172:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
; 	__sync_fetch_and_add(&policy->bytes, ctx_full_len(ctx));
    1173:	db 10 10 00 00 00 00 00	lock *(u64 *)(r0 + 16) += r1
    1174:	18 07 00 00 4b ff ff ff 00 00 00 00 00 00 00 00	r7 = 4294967115 ll
    1176:	b7 03 00 00 04 00 00 00	r3 = 4
; 		if (unlikely(policy->deny))
    1177:	71 01 02 00 00 00 00 00	r1 = *(u8 *)(r0 + 2)
    1178:	57 01 00 00 01 00 00 00	r1 &= 1
    1179:	15 01 08 00 00 00 00 00	if r1 == 0 goto +8 <LBB3_150>
    1180:	05 00 e9 ff 00 00 00 00	goto -23 <LBB3_146>

00000000000024e8 <LBB3_149>:
    1181:	18 07 00 00 7b ff ff ff 00 00 00 00 00 00 00 00	r7 = 4294967163 ll
    1183:	b7 03 00 00 00 00 00 00	r3 = 0
; 	return ctx->cb[off];
    1184:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1185:	61 11 38 00 00 00 00 00	r1 = *(u32 *)(r1 + 56)
    1186:	b7 08 00 00 00 00 00 00	r8 = 0
    1187:	15 01 e2 ff 00 00 00 00	if r1 == 0 goto -30 <LBB3_146>

0000000000002520 <LBB3_150>:
    1188:	57 08 00 00 ff ff 00 00	r8 &= 65535
    1189:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)

0000000000002530 <LBB3_151>:
    1190:	18 09 00 00 5d ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967133 ll
    1192:	79 a7 28 ff 00 00 00 00	r7 = *(u64 *)(r10 - 216)
; 	switch (ret) {
    1193:	bf 71 00 00 00 00 00 00	r1 = r7
    1194:	67 01 00 00 20 00 00 00	r1 <<= 32
    1195:	77 01 00 00 20 00 00 00	r1 >>= 32
    1196:	65 01 04 00 01 00 00 00	if r1 s> 1 goto +4 <LBB3_154>
    1197:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	switch (ret) {
    1198:	15 01 4f 00 00 00 00 00	if r1 == 0 goto +79 <LBB3_172>
    1199:	15 01 37 00 01 00 00 00	if r1 == 1 goto +55 <LBB3_161>
    1200:	05 00 92 02 00 00 00 00	goto +658 <LBB3_244>

0000000000002588 <LBB3_154>:
    1201:	bf 12 00 00 00 00 00 00	r2 = r1
    1202:	07 02 00 00 fe ff ff ff	r2 += -2
    1203:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    1204:	a5 02 35 00 02 00 00 00	if r2 < 2 goto +53 <LBB3_162>
    1205:	15 01 01 00 04 00 00 00	if r1 == 4 goto +1 <LBB3_156>
    1206:	05 00 8c 02 00 00 00 00	goto +652 <LBB3_244>

00000000000025b8 <LBB3_156>:
    1207:	bf 39 00 00 00 00 00 00	r9 = r3
; 	return ctx->len;
    1208:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 						   tuple.nexthdr, POLICY_EGRESS, 0,
    1209:	71 a4 94 ff 00 00 00 00	r4 = *(u8 *)(r10 - 108)
; 			send_policy_verdict_notify(ctx, *dstID, tuple.dport,
    1210:	69 a2 90 ff 00 00 00 00	r2 = *(u16 *)(r10 - 112)
    1211:	b7 03 00 00 02 00 00 00	r3 = 2
; 	volatile __u8 d = dir;
    1212:	73 3a 98 ff 00 00 00 00	*(u8 *)(r10 - 104) = r3
; 	return ((filter & d) > 0);
    1213:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    1215:	71 a5 98 ff 00 00 00 00	r5 = *(u8 *)(r10 - 104)
    1216:	5f 35 00 00 00 00 00 00	r5 &= r3
; 	__u64 cap_len = min_t(__u64, TRACE_PAYLOAD_LEN, ctx_len);
    1217:	bf 13 00 00 00 00 00 00	r3 = r1
    1218:	a5 01 01 00 80 00 00 00	if r1 < 128 goto +1 <LBB3_158>
    1219:	b7 03 00 00 80 00 00 00	r3 = 128

0000000000002620 <LBB3_158>:
; 	if (!policy_verdict_filter_allow(POLICY_VERDICT_LOG_FILTER, dir))
    1220:	15 05 21 00 00 00 00 00	if r5 == 0 goto +33 <LBB3_160>
; 		__notify_common_hdr(CILIUM_NOTIFY_POLICY_VERDICT, 0),
    1221:	61 65 44 00 00 00 00 00	r5 = *(u32 *)(r6 + 68)
    1222:	b7 00 00 00 00 00 00 00	r0 = 0
; 	msg = (typeof(msg)) {
    1223:	63 0a b4 ff 00 00 00 00	*(u32 *)(r10 - 76) = r0
    1224:	73 4a b2 ff 00 00 00 00	*(u8 *)(r10 - 78) = r4
    1225:	dc 02 00 00 10 00 00 00	r2 = be16 r2
    1226:	6b 2a b0 ff 00 00 00 00	*(u16 *)(r10 - 80) = r2
    1227:	63 8a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r8
    1228:	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 192)
    1229:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    1230:	b7 02 00 00 01 00 00 00	r2 = 1
    1231:	6b 2a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r2
    1232:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
    1233:	63 5a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r5
    1234:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1236:	6b 1a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r1
    1237:	b7 01 00 00 05 00 00 00	r1 = 5
    1238:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
    1239:	67 09 00 00 03 00 00 00	r9 <<= 3
    1240:	47 09 00 00 02 00 00 00	r9 |= 2
    1241:	73 9a b3 ff 00 00 00 00	*(u8 *)(r10 - 77) = r9
    1242:	6b 3a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r3
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1243:	67 03 00 00 20 00 00 00	r3 <<= 32
    1244:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1246:	4f 13 00 00 00 00 00 00	r3 |= r1
    1247:	bf a4 00 00 00 00 00 00	r4 = r10
; 		__notify_common_hdr(CILIUM_NOTIFY_POLICY_VERDICT, 0),
    1248:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP,
    1249:	bf 61 00 00 00 00 00 00	r1 = r6
    1250:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1252:	b7 05 00 00 20 00 00 00	r5 = 32
    1253:	85 00 00 00 19 00 00 00	call 25

0000000000002730 <LBB3_160>:
    1254:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)

0000000000002738 <LBB3_161>:
; 		if (unlikely(ct_state.rev_nat_index != ct_state_new.rev_nat_index))
    1255:	69 a1 68 ff 00 00 00 00	r1 = *(u16 *)(r10 - 152)
    1256:	15 01 06 02 00 00 00 00	if r1 == 0 goto +518 <LBB3_235>
    1257:	05 00 43 00 00 00 00 00	goto +67 <LBB3_176>

0000000000002750 <LBB3_162>:
    1258:	b7 01 00 00 01 00 00 00	r1 = 1
; 	ctx->cb[off] = data;
    1259:	63 16 38 00 00 00 00 00	*(u32 *)(r6 + 56) = r1
; 		if (ct_state.node_port) {
    1260:	69 a1 6a ff 00 00 00 00	r1 = *(u16 *)(r10 - 150)
    1261:	57 01 00 00 02 00 00 00	r1 &= 2
    1262:	15 01 ce 00 00 00 00 00	if r1 == 0 goto +206 <LBB3_164>
; 			ctx->tc_index |= TC_INDEX_F_SKIP_RECIRCULATION;
    1263:	61 61 2c 00 00 00 00 00	r1 = *(u32 *)(r6 + 44)
    1264:	47 01 00 00 08 00 00 00	r1 |= 8
    1265:	63 16 2c 00 00 00 00 00	*(u32 *)(r6 + 44) = r1
; 	asm volatile("r1 = %[ctx]\n\t"
    1266:	18 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r6 = 0 ll
    1268:	79 a7 48 ff 00 00 00 00	r7 = *(u64 *)(r10 - 184)
    1269:	bf 71 00 00 00 00 00 00	r1 = r7
    1270:	bf 62 00 00 00 00 00 00	r2 = r6
    1271:	b7 03 00 00 11 00 00 00	r3 = 17
    1272:	85 00 00 00 0c 00 00 00	call 12
    1273:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
    1274:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    1275:	18 09 00 00 74 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967156 ll
    1277:	05 00 45 02 00 00 00 00	goto +581 <LBB3_244>

00000000000027f0 <LBB3_172>:
    1278:	bf 37 00 00 00 00 00 00	r7 = r3
; 	return ctx->len;
    1279:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 						   tuple.nexthdr, POLICY_EGRESS, 0,
    1280:	71 a4 94 ff 00 00 00 00	r4 = *(u8 *)(r10 - 108)
; 			send_policy_verdict_notify(ctx, *dstID, tuple.dport,
    1281:	69 a2 90 ff 00 00 00 00	r2 = *(u16 *)(r10 - 112)
    1282:	b7 03 00 00 02 00 00 00	r3 = 2
; 	volatile __u8 d = dir;
    1283:	73 3a 98 ff 00 00 00 00	*(u8 *)(r10 - 104) = r3
; 	return ((filter & d) > 0);
    1284:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    1286:	71 a5 98 ff 00 00 00 00	r5 = *(u8 *)(r10 - 104)
    1287:	5f 35 00 00 00 00 00 00	r5 &= r3
; 	__u64 cap_len = min_t(__u64, TRACE_PAYLOAD_LEN, ctx_len);
    1288:	bf 13 00 00 00 00 00 00	r3 = r1
    1289:	a5 01 01 00 80 00 00 00	if r1 < 128 goto +1 <LBB3_174>
    1290:	b7 03 00 00 80 00 00 00	r3 = 128

0000000000002858 <LBB3_174>:
; 	if (!policy_verdict_filter_allow(POLICY_VERDICT_LOG_FILTER, dir))
    1291:	15 05 21 00 00 00 00 00	if r5 == 0 goto +33 <LBB3_176>
; 		__notify_common_hdr(CILIUM_NOTIFY_POLICY_VERDICT, 0),
    1292:	61 65 44 00 00 00 00 00	r5 = *(u32 *)(r6 + 68)
    1293:	b7 00 00 00 00 00 00 00	r0 = 0
; 	msg = (typeof(msg)) {
    1294:	63 0a b4 ff 00 00 00 00	*(u32 *)(r10 - 76) = r0
    1295:	73 4a b2 ff 00 00 00 00	*(u8 *)(r10 - 78) = r4
    1296:	dc 02 00 00 10 00 00 00	r2 = be16 r2
    1297:	6b 2a b0 ff 00 00 00 00	*(u16 *)(r10 - 80) = r2
    1298:	63 8a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r8
    1299:	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 192)
    1300:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    1301:	b7 02 00 00 01 00 00 00	r2 = 1
    1302:	6b 2a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r2
    1303:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
    1304:	63 5a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r5
    1305:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1307:	6b 1a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r1
    1308:	b7 01 00 00 05 00 00 00	r1 = 5
    1309:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
    1310:	67 07 00 00 03 00 00 00	r7 <<= 3
    1311:	47 07 00 00 02 00 00 00	r7 |= 2
    1312:	73 7a b3 ff 00 00 00 00	*(u8 *)(r10 - 77) = r7
    1313:	6b 3a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r3
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1314:	67 03 00 00 20 00 00 00	r3 <<= 32
    1315:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1317:	4f 13 00 00 00 00 00 00	r3 |= r1
    1318:	bf a4 00 00 00 00 00 00	r4 = r10
; 		__notify_common_hdr(CILIUM_NOTIFY_POLICY_VERDICT, 0),
    1319:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP,
    1320:	bf 61 00 00 00 00 00 00	r1 = r6
    1321:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1323:	b7 05 00 00 20 00 00 00	r5 = 32
    1324:	85 00 00 00 19 00 00 00	call 25

0000000000002968 <LBB3_176>:
; 		ret = ct_create4(get_ct_map4(&tuple), &CT_MAP_ANY4, &tuple, ctx,
    1325:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
; 	if (tuple->nexthdr == IPPROTO_TCP)
    1327:	71 a1 94 ff 00 00 00 00	r1 = *(u8 *)(r10 - 108)
; 		ret = ct_create4(get_ct_map4(&tuple), &CT_MAP_ANY4, &tuple, ctx,
    1328:	15 01 02 00 06 00 00 00	if r1 == 6 goto +2 <LBB3_178>
    1329:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll

0000000000002998 <LBB3_178>:
    1331:	7b 2a 38 ff 00 00 00 00	*(u64 *)(r10 - 200) = r2
    1332:	b7 02 00 00 00 00 00 00	r2 = 0
; 	struct ct_entry entry = { };
    1333:	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r2
; 				 CT_EGRESS, &ct_state_new, verdict > 0);
    1334:	bf 83 00 00 00 00 00 00	r3 = r8
    1335:	67 03 00 00 20 00 00 00	r3 <<= 32
; 	struct ct_entry entry = { };
    1336:	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r2
; 				 CT_EGRESS, &ct_state_new, verdict > 0);
    1337:	c7 03 00 00 20 00 00 00	r3 s>>= 32
; 	struct ct_entry entry = { };
    1338:	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 56) = r2
    1339:	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r2
    1340:	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r2
    1341:	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r2
    1342:	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r2
; 	entry.ifindex = ct_state->ifindex;
    1343:	6b 2a c0 ff 00 00 00 00	*(u16 *)(r10 - 64) = r2
; 	entry.rev_nat_index = ct_state->rev_nat_index;
    1344:	6b 2a be ff 00 00 00 00	*(u16 *)(r10 - 66) = r2
    1345:	b7 06 00 00 01 00 00 00	r6 = 1
; 				 CT_EGRESS, &ct_state_new, verdict > 0);
    1346:	b7 02 00 00 01 00 00 00	r2 = 1
    1347:	65 03 01 00 00 00 00 00	if r3 s> 0 goto +1 <LBB3_180>
    1348:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000002a28 <LBB3_180>:
; 	if (tuple->nexthdr == IPPROTO_TCP)
    1349:	15 01 01 00 06 00 00 00	if r1 == 6 goto +1 <LBB3_182>
    1350:	b7 06 00 00 00 00 00 00	r6 = 0

0000000000002a38 <LBB3_182>:
    1351:	b7 09 00 00 3c 00 00 00	r9 = 60
    1352:	67 06 00 00 01 00 00 00	r6 <<= 1
; 	entry.proxy_redirect = proxy_redirect;
    1353:	67 02 00 00 06 00 00 00	r2 <<= 6
; 	entry.dsr = ct_state->dsr;
    1354:	6b 2a bc ff 00 00 00 00	*(u16 *)(r10 - 68) = r2
; 	if (tcp) {
    1355:	55 01 09 00 06 00 00 00	if r1 != 6 goto +9 <LBB3_186>
    1356:	bf 61 00 00 00 00 00 00	r1 = r6
    1357:	67 01 00 00 03 00 00 00	r1 <<= 3
; 		entry->seen_non_syn |= !syn;
    1358:	a7 01 00 00 10 00 00 00	r1 ^= 16
    1359:	57 01 00 00 f8 00 00 00	r1 &= 248
    1360:	b7 09 00 00 3c 00 00 00	r9 = 60
    1361:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_185>
    1362:	b7 09 00 00 60 54 00 00	r9 = 21600

0000000000002a98 <LBB3_185>:
; 		entry->seen_non_syn |= !syn;
    1363:	4f 12 00 00 00 00 00 00	r2 |= r1
    1364:	6b 2a bc ff 00 00 00 00	*(u16 *)(r10 - 68) = r2

0000000000002aa8 <LBB3_186>:
; 	__u32 now = bpf_mono_now();
    1365:	85 00 00 00 05 00 00 00	call 5
    1366:	37 00 00 00 00 ca 9a 3b	r0 /= 1000000000
; 	WRITE_ONCE(entry->lifetime, now + lifetime);
    1367:	0f 09 00 00 00 00 00 00	r9 += r0
    1368:	63 9a b8 ff 00 00 00 00	*(u32 *)(r10 - 72) = r9
; 		accumulated_flags = READ_ONCE(entry->tx_flags_seen);
    1369:	71 a3 c2 ff 00 00 00 00	r3 = *(u8 *)(r10 - 62)
; 		last_report = READ_ONCE(entry->last_tx_report);
    1370:	61 a2 c8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 56)
; 	seen_flags |= accumulated_flags;
    1371:	bf 31 00 00 00 00 00 00	r1 = r3
    1372:	4f 61 00 00 00 00 00 00	r1 |= r6
    1373:	bf 14 00 00 00 00 00 00	r4 = r1
    1374:	57 04 00 00 ff 00 00 00	r4 &= 255
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
    1375:	5d 43 07 00 00 00 00 00	if r3 != r4 goto +7 <LBB3_188>
    1376:	07 02 00 00 05 00 00 00	r2 += 5
    1377:	bf 03 00 00 00 00 00 00	r3 = r0
    1378:	67 03 00 00 20 00 00 00	r3 <<= 32
    1379:	77 03 00 00 20 00 00 00	r3 >>= 32
    1380:	67 02 00 00 20 00 00 00	r2 <<= 32
    1381:	77 02 00 00 20 00 00 00	r2 >>= 32
; 	if (last_report + bpf_sec_to_mono(CT_REPORT_INTERVAL) < now ||
    1382:	3d 32 02 00 00 00 00 00	if r2 >= r3 goto +2 <LBB3_189>

0000000000002b38 <LBB3_188>:
; 			WRITE_ONCE(entry->tx_flags_seen, seen_flags);
    1383:	73 1a c2 ff 00 00 00 00	*(u8 *)(r10 - 62) = r1
; 			WRITE_ONCE(entry->last_tx_report, now);
    1384:	63 0a c8 ff 00 00 00 00	*(u32 *)(r10 - 56) = r0

0000000000002b48 <LBB3_189>:
    1385:	b7 01 00 00 01 00 00 00	r1 = 1
; 		entry.tx_packets = 1;
    1386:	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r1
    1387:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	return ctx->len;
    1388:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 		entry.tx_bytes = ctx_full_len(ctx);
    1389:	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 80) = r1
; 	struct debug_msg msg = {
    1390:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1392:	6b 1a da ff 00 00 00 00	*(u16 *)(r10 - 38) = r1
    1393:	b7 01 00 00 02 32 00 00	r1 = 12802
    1394:	6b 1a d8 ff 00 00 00 00	*(u16 *)(r10 - 40) = r1
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1395:	61 61 44 00 00 00 00 00	r1 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
    1396:	63 1a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r1
    1397:	b7 09 00 00 00 00 00 00	r9 = 0
    1398:	63 9a e8 ff 00 00 00 00	*(u32 *)(r10 - 24) = r9
    1399:	18 07 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r7 = 0 ll
    1401:	63 7a e4 ff 00 00 00 00	*(u32 *)(r10 - 28) = r7
    1402:	63 9a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r9
    1403:	bf a4 00 00 00 00 00 00	r4 = r10
; 		entry.tx_packets = 1;
    1404:	07 04 00 00 d8 ff ff ff	r4 += -40
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1405:	bf 61 00 00 00 00 00 00	r1 = r6
    1406:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1408:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1410:	b7 05 00 00 14 00 00 00	r5 = 20
    1411:	85 00 00 00 19 00 00 00	call 25
; 	entry.src_sec_id = ct_state->src_sec_id;
    1412:	63 7a c4 ff 00 00 00 00	*(u32 *)(r10 - 60) = r7
    1413:	bf a2 00 00 00 00 00 00	r2 = r10
; 		entry.tx_packets = 1;
    1414:	07 02 00 00 88 ff ff ff	r2 += -120
    1415:	bf a3 00 00 00 00 00 00	r3 = r10
    1416:	07 03 00 00 98 ff ff ff	r3 += -104
; 	if (map_update_elem(map_main, tuple, &entry, 0) < 0) {
    1417:	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 200)
    1418:	b7 04 00 00 00 00 00 00	r4 = 0
    1419:	85 00 00 00 02 00 00 00	call 2
    1420:	67 00 00 00 20 00 00 00	r0 <<= 32
    1421:	c7 00 00 00 20 00 00 00	r0 s>>= 32
    1422:	65 00 05 00 ff ff ff ff	if r0 s> -1 goto +5 <LBB3_191>
; 	struct signal_msg msg = {
    1423:	b7 01 00 00 01 00 00 00	r1 = 1
    1424:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
    1425:	bf a4 00 00 00 00 00 00	r4 = r10
    1426:	07 04 00 00 d8 ff ff ff	r4 += -40
    1427:	05 00 1b 00 00 00 00 00	goto +27 <LBB3_193>

0000000000002ca0 <LBB3_191>:
; 		struct ipv4_ct_tuple icmp_tuple = {
    1428:	b7 01 00 00 01 00 00 00	r1 = 1
    1429:	73 1a e4 ff 00 00 00 00	*(u8 *)(r10 - 28) = r1
; 			.daddr = tuple->daddr,
    1430:	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 120)
; 		struct ipv4_ct_tuple icmp_tuple = {
    1431:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
; 			.flags = tuple->flags | TUPLE_F_RELATED,
    1432:	71 a1 95 ff 00 00 00 00	r1 = *(u8 *)(r10 - 107)
    1433:	47 01 00 00 02 00 00 00	r1 |= 2
; 		struct ipv4_ct_tuple icmp_tuple = {
    1434:	73 1a e5 ff 00 00 00 00	*(u8 *)(r10 - 27) = r1
; 		entry.seen_non_syn = true; /* For ICMP, there is no SYN. */
    1435:	69 a1 bc ff 00 00 00 00	r1 = *(u16 *)(r10 - 68)
    1436:	47 01 00 00 10 00 00 00	r1 |= 16
    1437:	6b 1a bc ff 00 00 00 00	*(u16 *)(r10 - 68) = r1
; 		struct ipv4_ct_tuple icmp_tuple = {
    1438:	63 9a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r9
    1439:	bf a2 00 00 00 00 00 00	r2 = r10
    1440:	07 02 00 00 d8 ff ff ff	r2 += -40
    1441:	bf a3 00 00 00 00 00 00	r3 = r10
    1442:	07 03 00 00 98 ff ff ff	r3 += -104
; 		if (map_update_elem(map_related, &icmp_tuple, &entry, 0) < 0) {
    1443:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1445:	b7 04 00 00 00 00 00 00	r4 = 0
    1446:	85 00 00 00 02 00 00 00	call 2
    1447:	67 00 00 00 20 00 00 00	r0 <<= 32
    1448:	c7 00 00 00 20 00 00 00	r0 s>>= 32
    1449:	65 00 0f 00 ff ff ff ff	if r0 s> -1 goto +15 <LBB3_194>
    1450:	b7 01 00 00 01 00 00 00	r1 = 1
; 	struct signal_msg msg = {
    1451:	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 176) = r1
    1452:	bf a4 00 00 00 00 00 00	r4 = r10
    1453:	07 04 00 00 50 ff ff ff	r4 += -176
    1454:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)

0000000000002d78 <LBB3_193>:
    1455:	bf 61 00 00 00 00 00 00	r1 = r6
    1456:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1458:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1460:	b7 05 00 00 08 00 00 00	r5 = 8
    1461:	85 00 00 00 19 00 00 00	call 25
    1462:	18 09 00 00 65 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967141 ll
    1464:	05 00 89 01 00 00 00 00	goto +393 <LBB3_243>

0000000000002dc8 <LBB3_194>:
    1465:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    1466:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
    1467:	79 a7 28 ff 00 00 00 00	r7 = *(u64 *)(r10 - 216)
    1468:	05 00 32 01 00 00 00 00	goto +306 <LBB3_235>

0000000000002de8 <LBB3_164>:
; 		if (ct_state.rev_nat_index) {
    1469:	69 a3 68 ff 00 00 00 00	r3 = *(u16 *)(r10 - 152)
    1470:	15 03 30 01 00 00 00 00	if r3 == 0 goto +304 <LBB3_235>
    1471:	bf 61 00 00 00 00 00 00	r1 = r6
; 	struct debug_msg msg = {
    1472:	18 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r6 = 0 ll
    1474:	6b 6a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r6
    1475:	b7 02 00 00 02 24 00 00	r2 = 9218
    1476:	6b 2a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r2
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1477:	61 12 44 00 00 00 00 00	r2 = *(u32 *)(r1 + 68)
; 	struct debug_msg msg = {
    1478:	63 3a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r3
    1479:	63 2a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r2
    1480:	b7 02 00 00 00 00 00 00	r2 = 0
    1481:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    1482:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
    1483:	bf a4 00 00 00 00 00 00	r4 = r10
    1484:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1485:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1487:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1489:	b7 05 00 00 14 00 00 00	r5 = 20
    1490:	85 00 00 00 19 00 00 00	call 25
    1491:	bf a2 00 00 00 00 00 00	r2 = r10
    1492:	07 02 00 00 68 ff ff ff	r2 += -152
; 	nat = map_lookup_elem(&LB4_REVERSE_NAT_MAP, &ct_state->rev_nat_index);
    1493:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1495:	85 00 00 00 01 00 00 00	call 1
    1496:	b7 09 00 00 00 00 00 00	r9 = 0
; 	if (nat == NULL)
    1497:	15 00 0a 01 00 00 00 00	if r0 == 0 goto +266 <LBB3_232>
    1498:	79 a9 20 ff 00 00 00 00	r9 = *(u64 *)(r10 - 224)
    1499:	57 09 00 00 1f ff ff ff	r9 &= -225
; 	cilium_dbg_lb(ctx, DBG_LB4_REVERSE_NAT, nat->address, nat->port);
    1500:	71 03 02 00 00 00 00 00	r3 = *(u8 *)(r0 + 2)
    1501:	71 07 03 00 00 00 00 00	r7 = *(u8 *)(r0 + 3)
    1502:	71 04 00 00 00 00 00 00	r4 = *(u8 *)(r0 + 0)
    1503:	71 02 01 00 00 00 00 00	r2 = *(u8 *)(r0 + 1)
    1504:	71 05 04 00 00 00 00 00	r5 = *(u8 *)(r0 + 4)
    1505:	7b 0a 38 ff 00 00 00 00	*(u64 *)(r10 - 200) = r0
    1506:	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 200)
    1507:	71 10 05 00 00 00 00 00	r0 = *(u8 *)(r1 + 5)
; 	struct debug_msg msg = {
    1508:	6b 6a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r6
    1509:	b7 06 00 00 02 25 00 00	r6 = 9474
    1510:	6b 6a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r6
; 	cilium_dbg_lb(ctx, DBG_LB4_REVERSE_NAT, nat->address, nat->port);
    1511:	67 00 00 00 08 00 00 00	r0 <<= 8
    1512:	4f 50 00 00 00 00 00 00	r0 |= r5
    1513:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1514:	61 15 44 00 00 00 00 00	r5 = *(u32 *)(r1 + 68)
    1515:	b7 06 00 00 00 00 00 00	r6 = 0
; 	struct debug_msg msg = {
    1516:	63 6a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r6
    1517:	63 0a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r0
    1518:	63 5a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r5
; 	cilium_dbg_lb(ctx, DBG_LB4_REVERSE_NAT, nat->address, nat->port);
    1519:	67 02 00 00 08 00 00 00	r2 <<= 8
    1520:	4f 42 00 00 00 00 00 00	r2 |= r4
    1521:	67 07 00 00 08 00 00 00	r7 <<= 8
    1522:	4f 37 00 00 00 00 00 00	r7 |= r3
    1523:	67 07 00 00 10 00 00 00	r7 <<= 16
    1524:	4f 27 00 00 00 00 00 00	r7 |= r2
; 	struct debug_msg msg = {
    1525:	63 7a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r7
    1526:	bf a4 00 00 00 00 00 00	r4 = r10
    1527:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1528:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1530:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1532:	b7 05 00 00 14 00 00 00	r5 = 20
    1533:	85 00 00 00 19 00 00 00	call 25
    1534:	79 a2 38 ff 00 00 00 00	r2 = *(u64 *)(r10 - 200)
; 	return ip4->frag_off & bpf_htons(0x1FFF);
    1535:	57 09 00 00 ff ff 00 00	r9 &= 65535
; 	if (nat->port && has_l4_header) {
    1536:	55 09 47 00 00 00 00 00	if r9 != 0 goto +71 <LBB3_209>
    1537:	71 21 04 00 00 00 00 00	r1 = *(u8 *)(r2 + 4)
    1538:	71 27 05 00 00 00 00 00	r7 = *(u8 *)(r2 + 5)
    1539:	67 07 00 00 08 00 00 00	r7 <<= 8
    1540:	4f 17 00 00 00 00 00 00	r7 |= r1
; 	if (nat->port && has_l4_header) {
    1541:	15 07 42 00 00 00 00 00	if r7 == 0 goto +66 <LBB3_209>
    1542:	b7 09 00 00 00 00 00 00	r9 = 0
; 		ret = reverse_map_l4_port(ctx, tuple->nexthdr, nat->port, l4_off, csum_off);
    1543:	71 a1 94 ff 00 00 00 00	r1 = *(u8 *)(r10 - 108)
; 	switch (nexthdr) {
    1544:	65 01 06 00 10 00 00 00	if r1 s> 16 goto +6 <LBB3_195>
    1545:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	switch (nexthdr) {
    1546:	15 01 34 00 01 00 00 00	if r1 == 1 goto +52 <LBB3_206>
    1547:	15 01 06 00 06 00 00 00	if r1 == 6 goto +6 <LBB3_197>

0000000000003060 <LBB3_171>:
    1548:	18 09 00 00 72 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967154 ll
    1550:	05 00 30 00 00 00 00 00	goto +48 <LBB3_206>

0000000000003078 <LBB3_195>:
    1551:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	switch (nexthdr) {
    1552:	15 01 2e 00 3a 00 00 00	if r1 == 58 goto +46 <LBB3_206>
    1553:	55 01 fa ff 11 00 00 00	if r1 != 17 goto -6 <LBB3_171>

0000000000003090 <LBB3_197>:
    1554:	bf a3 00 00 00 00 00 00	r3 = r10
    1555:	07 03 00 00 d8 ff ff ff	r3 += -40
; 	return ctx_load_bytes(ctx, off, port, sizeof(__be16));
    1556:	bf 61 00 00 00 00 00 00	r1 = r6
    1557:	79 a2 30 ff 00 00 00 00	r2 = *(u64 *)(r10 - 208)
    1558:	b7 04 00 00 02 00 00 00	r4 = 2
    1559:	85 00 00 00 1a 00 00 00	call 26
    1560:	bf 09 00 00 00 00 00 00	r9 = r0
    1561:	bf 91 00 00 00 00 00 00	r1 = r9
    1562:	67 01 00 00 20 00 00 00	r1 <<= 32
    1563:	77 01 00 00 20 00 00 00	r1 >>= 32
    1564:	b7 02 00 00 01 00 00 00	r2 = 1
; 			if (IS_ERR(ret))
    1565:	15 01 01 00 02 00 00 00	if r1 == 2 goto +1 <LBB3_199>
    1566:	b7 02 00 00 00 00 00 00	r2 = 0

00000000000030f8 <LBB3_199>:
; 			if (IS_ERR(ret))
    1567:	77 01 00 00 1f 00 00 00	r1 >>= 31
    1568:	4f 21 00 00 00 00 00 00	r1 |= r2
    1569:	55 01 1b 00 00 00 00 00	if r1 != 0 goto +27 <LBB3_204>
; 			if (port != old_port) {
    1570:	69 a3 d8 ff 00 00 00 00	r3 = *(u16 *)(r10 - 40)
    1571:	1d 73 1a 00 00 00 00 00	if r3 == r7 goto +26 <LBB3_205>
    1572:	6b 7a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r7
; 	return l4_csum_replace(ctx, l4_off + csum->offset, from, to, flags | csum->flags);
    1573:	bf 61 00 00 00 00 00 00	r1 = r6
    1574:	bf 74 00 00 00 00 00 00	r4 = r7
    1575:	79 a7 30 ff 00 00 00 00	r7 = *(u64 *)(r10 - 208)
; 	return l4_csum_replace(ctx, l4_off + csum->offset, from, to, flags | csum->flags);
    1576:	bf 72 00 00 00 00 00 00	r2 = r7
    1577:	b7 05 00 00 02 00 00 00	r5 = 2
    1578:	85 00 00 00 0b 00 00 00	call 11
    1579:	67 00 00 00 20 00 00 00	r0 <<= 32
    1580:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 	if (csum_l4_replace(ctx, l4_off, csum_off, old_port, port, sizeof(port)) < 0)
    1581:	65 00 03 00 ff ff ff ff	if r0 s> -1 goto +3 <LBB3_203>
    1582:	18 09 00 00 66 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967142 ll
    1584:	05 00 0e 00 00 00 00 00	goto +14 <LBB3_206>

0000000000003188 <LBB3_203>:
    1585:	bf a3 00 00 00 00 00 00	r3 = r10
    1586:	07 03 00 00 98 ff ff ff	r3 += -104
; 	if (ctx_store_bytes(ctx, l4_off + off, &port, sizeof(port), 0) < 0)
    1587:	bf 61 00 00 00 00 00 00	r1 = r6
    1588:	bf 72 00 00 00 00 00 00	r2 = r7
    1589:	b7 04 00 00 02 00 00 00	r4 = 2
    1590:	b7 05 00 00 00 00 00 00	r5 = 0
    1591:	85 00 00 00 09 00 00 00	call 9
    1592:	18 09 00 00 73 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967155 ll
; 	if (ctx_store_bytes(ctx, l4_off + off, &port, sizeof(port), 0) < 0)
    1594:	67 00 00 00 20 00 00 00	r0 <<= 32
    1595:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 				if (IS_ERR(ret))
    1596:	65 00 01 00 ff ff ff ff	if r0 s> -1 goto +1 <LBB3_205>

00000000000031e8 <LBB3_204>:
    1597:	05 00 01 00 00 00 00 00	goto +1 <LBB3_206>

00000000000031f0 <LBB3_205>:
    1598:	b7 09 00 00 00 00 00 00	r9 = 0

00000000000031f8 <LBB3_206>:
; 		if (IS_ERR(ret))
    1599:	bf 91 00 00 00 00 00 00	r1 = r9
    1600:	67 01 00 00 20 00 00 00	r1 <<= 32
    1601:	77 01 00 00 20 00 00 00	r1 >>= 32
    1602:	b7 02 00 00 01 00 00 00	r2 = 1
    1603:	15 01 01 00 02 00 00 00	if r1 == 2 goto +1 <LBB3_208>
    1604:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000003228 <LBB3_208>:
; 		if (IS_ERR(ret))
    1605:	77 01 00 00 1f 00 00 00	r1 >>= 31
    1606:	4f 21 00 00 00 00 00 00	r1 |= r2
    1607:	55 01 9b 00 00 00 00 00	if r1 != 0 goto +155 <LBB3_231>

0000000000003240 <LBB3_209>:
    1608:	bf a3 00 00 00 00 00 00	r3 = r10
    1609:	07 03 00 00 d8 ff ff ff	r3 += -40
; 		ret = ctx_load_bytes(ctx, l3_off + offsetof(struct iphdr, saddr), &old_sip, 4);
    1610:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1611:	b7 02 00 00 1a 00 00 00	r2 = 26
    1612:	b7 04 00 00 04 00 00 00	r4 = 4
    1613:	85 00 00 00 1a 00 00 00	call 26
    1614:	bf 09 00 00 00 00 00 00	r9 = r0
    1615:	bf 91 00 00 00 00 00 00	r1 = r9
    1616:	67 01 00 00 20 00 00 00	r1 <<= 32
    1617:	77 01 00 00 20 00 00 00	r1 >>= 32
    1618:	b7 02 00 00 01 00 00 00	r2 = 1
; 		if (IS_ERR(ret))
    1619:	15 01 01 00 02 00 00 00	if r1 == 2 goto +1 <LBB3_211>
    1620:	b7 02 00 00 00 00 00 00	r2 = 0

00000000000032a8 <LBB3_211>:
    1621:	77 01 00 00 1f 00 00 00	r1 >>= 31
    1622:	4f 21 00 00 00 00 00 00	r1 |= r2
    1623:	79 a3 38 ff 00 00 00 00	r3 = *(u64 *)(r10 - 200)
    1624:	55 01 8a 00 00 00 00 00	if r1 != 0 goto +138 <LBB3_231>
; 		new_sip = nat->address;
    1625:	71 31 01 00 00 00 00 00	r1 = *(u8 *)(r3 + 1)
    1626:	67 01 00 00 08 00 00 00	r1 <<= 8
    1627:	71 32 00 00 00 00 00 00	r2 = *(u8 *)(r3 + 0)
    1628:	4f 21 00 00 00 00 00 00	r1 |= r2
    1629:	71 32 02 00 00 00 00 00	r2 = *(u8 *)(r3 + 2)
    1630:	71 33 03 00 00 00 00 00	r3 = *(u8 *)(r3 + 3)
    1631:	67 03 00 00 08 00 00 00	r3 <<= 8
    1632:	4f 23 00 00 00 00 00 00	r3 |= r2
    1633:	67 03 00 00 10 00 00 00	r3 <<= 16
    1634:	4f 13 00 00 00 00 00 00	r3 |= r1
    1635:	63 3a 50 ff 00 00 00 00	*(u32 *)(r10 - 176) = r3
; 	if (ct_state->loopback) {
    1636:	69 a1 6a ff 00 00 00 00	r1 = *(u16 *)(r10 - 150)
    1637:	57 01 00 00 01 00 00 00	r1 &= 1
; 	__be32 old_sip, new_sip, sum = 0;
    1638:	b7 06 00 00 00 00 00 00	r6 = 0
; 	if (ct_state->loopback) {
    1639:	15 01 48 00 00 00 00 00	if r1 == 0 goto +72 <LBB3_223>
    1640:	bf a3 00 00 00 00 00 00	r3 = r10
    1641:	07 03 00 00 f8 ff ff ff	r3 += -8
    1642:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 		ret = ctx_load_bytes(ctx, l3_off + offsetof(struct iphdr, daddr), &old_dip, 4);
    1643:	bf 61 00 00 00 00 00 00	r1 = r6
    1644:	b7 02 00 00 1e 00 00 00	r2 = 30
    1645:	b7 04 00 00 04 00 00 00	r4 = 4
    1646:	85 00 00 00 1a 00 00 00	call 26
    1647:	bf 09 00 00 00 00 00 00	r9 = r0
    1648:	bf 91 00 00 00 00 00 00	r1 = r9
    1649:	67 01 00 00 20 00 00 00	r1 <<= 32
    1650:	77 01 00 00 20 00 00 00	r1 >>= 32
    1651:	b7 02 00 00 01 00 00 00	r2 = 1
; 		if (IS_ERR(ret))
    1652:	15 01 01 00 02 00 00 00	if r1 == 2 goto +1 <LBB3_215>
    1653:	b7 02 00 00 00 00 00 00	r2 = 0

00000000000033b0 <LBB3_215>:
; 		if (IS_ERR(ret))
    1654:	77 01 00 00 1f 00 00 00	r1 >>= 31
    1655:	4f 21 00 00 00 00 00 00	r1 |= r2
    1656:	55 01 27 00 00 00 00 00	if r1 != 0 goto +39 <LBB3_219>
; 		cilium_dbg_lb(ctx, DBG_LB4_LOOPBACK_SNAT_REV, old_dip, old_sip);
    1657:	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 8)
    1658:	61 a2 d8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 40)
; 	struct debug_msg msg = {
    1659:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    1661:	6b 3a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r3
    1662:	b7 03 00 00 02 27 00 00	r3 = 9986
    1663:	6b 3a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r3
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1664:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
    1665:	63 2a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r2
    1666:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
    1667:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
    1668:	b7 01 00 00 00 00 00 00	r1 = 0
    1669:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
    1670:	bf a4 00 00 00 00 00 00	r4 = r10
; 		cilium_dbg_lb(ctx, DBG_LB4_LOOPBACK_SNAT_REV, old_dip, old_sip);
    1671:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1672:	bf 61 00 00 00 00 00 00	r1 = r6
    1673:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1675:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1677:	b7 05 00 00 14 00 00 00	r5 = 20
    1678:	85 00 00 00 19 00 00 00	call 25
    1679:	bf a3 00 00 00 00 00 00	r3 = r10
; 		cilium_dbg_lb(ctx, DBG_LB4_LOOPBACK_SNAT_REV, old_dip, old_sip);
    1680:	07 03 00 00 d8 ff ff ff	r3 += -40
; 		ret = ctx_store_bytes(ctx, l3_off + offsetof(struct iphdr, daddr), &old_sip, 4, 0);
    1681:	bf 61 00 00 00 00 00 00	r1 = r6
    1682:	b7 02 00 00 1e 00 00 00	r2 = 30
    1683:	b7 04 00 00 04 00 00 00	r4 = 4
    1684:	b7 05 00 00 00 00 00 00	r5 = 0
    1685:	85 00 00 00 09 00 00 00	call 9
    1686:	67 00 00 00 20 00 00 00	r0 <<= 32
    1687:	77 00 00 00 20 00 00 00	r0 >>= 32
    1688:	b7 01 00 00 01 00 00 00	r1 = 1
; 		if (IS_ERR(ret))
    1689:	15 00 01 00 02 00 00 00	if r0 == 2 goto +1 <LBB3_218>
    1690:	b7 01 00 00 00 00 00 00	r1 = 0

00000000000034d8 <LBB3_218>:
    1691:	77 00 00 00 1f 00 00 00	r0 >>= 31
    1692:	4f 10 00 00 00 00 00 00	r0 |= r1
    1693:	18 09 00 00 73 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967155 ll
    1695:	15 00 01 00 00 00 00 00	if r0 == 0 goto +1 <LBB3_220>

0000000000003500 <LBB3_219>:
    1696:	05 00 42 00 00 00 00 00	goto +66 <LBB3_231>

0000000000003508 <LBB3_220>:
    1697:	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 8)
    1698:	a7 02 00 00 ff ff ff ff	r2 ^= -1
    1699:	67 02 00 00 20 00 00 00	r2 <<= 32
    1700:	77 02 00 00 20 00 00 00	r2 >>= 32
    1701:	61 a1 d8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 40)
; 	csum += addend;
    1702:	bf 16 00 00 00 00 00 00	r6 = r1
    1703:	0f 26 00 00 00 00 00 00	r6 += r2
    1704:	bf 63 00 00 00 00 00 00	r3 = r6
    1705:	67 03 00 00 20 00 00 00	r3 <<= 32
    1706:	77 03 00 00 20 00 00 00	r3 >>= 32
    1707:	b7 02 00 00 01 00 00 00	r2 = 1
    1708:	5d 63 01 00 00 00 00 00	if r3 != r6 goto +1 <LBB3_222>
    1709:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000003570 <LBB3_222>:
; 		tuple->saddr = old_sip;
    1710:	63 1a 8c ff 00 00 00 00	*(u32 *)(r10 - 116) = r1
; 	return csum + (csum < addend);
    1711:	0f 26 00 00 00 00 00 00	r6 += r2

0000000000003580 <LBB3_223>:
    1712:	bf a3 00 00 00 00 00 00	r3 = r10
    1713:	07 03 00 00 50 ff ff ff	r3 += -176
; 	ret = ctx_store_bytes(ctx, l3_off + offsetof(struct iphdr, saddr),
    1714:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1715:	b7 02 00 00 1a 00 00 00	r2 = 26
    1716:	b7 04 00 00 04 00 00 00	r4 = 4
    1717:	b7 05 00 00 00 00 00 00	r5 = 0
    1718:	85 00 00 00 09 00 00 00	call 9
    1719:	67 00 00 00 20 00 00 00	r0 <<= 32
    1720:	77 00 00 00 20 00 00 00	r0 >>= 32
    1721:	b7 01 00 00 01 00 00 00	r1 = 1
; 	if (IS_ERR(ret))
    1722:	15 00 01 00 02 00 00 00	if r0 == 2 goto +1 <LBB3_225>
    1723:	b7 01 00 00 00 00 00 00	r1 = 0

00000000000035e0 <LBB3_225>:
    1724:	77 00 00 00 1f 00 00 00	r0 >>= 31
    1725:	4f 10 00 00 00 00 00 00	r0 |= r1
    1726:	18 09 00 00 73 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967155 ll
    1728:	55 00 22 00 00 00 00 00	if r0 != 0 goto +34 <LBB3_231>
    1729:	61 a1 d8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 40)
    1730:	a7 01 00 00 ff ff ff ff	r1 ^= -1
    1731:	67 01 00 00 20 00 00 00	r1 <<= 32
    1732:	77 01 00 00 20 00 00 00	r1 >>= 32
    1733:	61 a4 50 ff 00 00 00 00	r4 = *(u32 *)(r10 - 176)
; 	csum += addend;
    1734:	0f 14 00 00 00 00 00 00	r4 += r1
    1735:	bf 43 00 00 00 00 00 00	r3 = r4
    1736:	67 03 00 00 20 00 00 00	r3 <<= 32
    1737:	77 03 00 00 20 00 00 00	r3 >>= 32
    1738:	b7 01 00 00 01 00 00 00	r1 = 1
    1739:	b7 02 00 00 01 00 00 00	r2 = 1
    1740:	5d 43 01 00 00 00 00 00	if r3 != r4 goto +1 <LBB3_228>
    1741:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000003670 <LBB3_228>:
; 	return csum + (csum < addend);
    1742:	0f 24 00 00 00 00 00 00	r4 += r2
; 		    __builtin_constant_p(seed) && seed == 0)
    1743:	67 06 00 00 20 00 00 00	r6 <<= 32
    1744:	77 06 00 00 20 00 00 00	r6 >>= 32
; 	return csum + (csum < addend);
    1745:	67 04 00 00 20 00 00 00	r4 <<= 32
    1746:	77 04 00 00 20 00 00 00	r4 >>= 32
; 		    __builtin_constant_p(seed) && seed == 0)
    1747:	0f 64 00 00 00 00 00 00	r4 += r6
    1748:	bf 42 00 00 00 00 00 00	r2 = r4
    1749:	67 02 00 00 20 00 00 00	r2 <<= 32
    1750:	77 02 00 00 20 00 00 00	r2 >>= 32
    1751:	5d 42 01 00 00 00 00 00	if r2 != r4 goto +1 <LBB3_230>
    1752:	b7 01 00 00 00 00 00 00	r1 = 0

00000000000036c8 <LBB3_230>:
    1753:	0f 14 00 00 00 00 00 00	r4 += r1
; 	if (l3_csum_replace(ctx, l3_off + offsetof(struct iphdr, check), 0, sum, 0) < 0)
    1754:	79 a1 48 ff 00 00 00 00	r1 = *(u64 *)(r10 - 184)
    1755:	b7 02 00 00 18 00 00 00	r2 = 24
    1756:	b7 03 00 00 00 00 00 00	r3 = 0
    1757:	b7 05 00 00 00 00 00 00	r5 = 0
    1758:	85 00 00 00 0a 00 00 00	call 10
    1759:	bf 09 00 00 00 00 00 00	r9 = r0
    1760:	67 09 00 00 20 00 00 00	r9 <<= 32
    1761:	c7 09 00 00 3f 00 00 00	r9 s>>= 63
    1762:	57 09 00 00 67 ff ff ff	r9 &= -153

0000000000003718 <LBB3_231>:
    1763:	79 a7 28 ff 00 00 00 00	r7 = *(u64 *)(r10 - 216)

0000000000003720 <LBB3_232>:
; 			if (IS_ERR(ret))
    1764:	bf 91 00 00 00 00 00 00	r1 = r9
    1765:	67 01 00 00 20 00 00 00	r1 <<= 32
    1766:	77 01 00 00 20 00 00 00	r1 >>= 32
    1767:	b7 02 00 00 01 00 00 00	r2 = 1
    1768:	15 01 01 00 02 00 00 00	if r1 == 2 goto +1 <LBB3_234>
    1769:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000003750 <LBB3_234>:
    1770:	77 01 00 00 1f 00 00 00	r1 >>= 31
    1771:	4f 21 00 00 00 00 00 00	r1 |= r2
    1772:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    1773:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
    1774:	55 01 54 00 00 00 00 00	if r1 != 0 goto +84 <LBB3_244>

0000000000003778 <LBB3_235>:
; 	return is_defined(ENABLE_HOST_REDIRECT) && verdict > 0 &&
    1775:	bf 81 00 00 00 00 00 00	r1 = r8
    1776:	67 01 00 00 20 00 00 00	r1 <<= 32
    1777:	c7 01 00 00 20 00 00 00	r1 s>>= 32
    1778:	c5 01 8b 00 01 00 00 00	if r1 s< 1 goto +139 <LBB3_249>
; 	       (dir == CT_NEW || dir == CT_ESTABLISHED ||  dir == CT_REOPENED);
    1779:	bf 71 00 00 00 00 00 00	r1 = r7
    1780:	57 01 00 00 07 00 00 00	r1 &= 7
    1781:	25 01 88 00 04 00 00 00	if r1 > 4 goto +136 <LBB3_249>
    1782:	b7 02 00 00 01 00 00 00	r2 = 1
    1783:	6f 12 00 00 00 00 00 00	r2 <<= r1
    1784:	57 02 00 00 13 00 00 00	r2 &= 19
    1785:	55 02 01 00 00 00 00 00	if r2 != 0 goto +1 <LBB3_238>
    1786:	05 00 83 00 00 00 00 00	goto +131 <LBB3_249>

00000000000037d8 <LBB3_238>:
    1787:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    1788:	bf 21 00 00 00 00 00 00	r1 = r2
    1789:	67 01 00 00 20 00 00 00	r1 <<= 32
    1790:	77 01 00 00 20 00 00 00	r1 >>= 32
    1791:	b7 03 00 00 80 00 00 00	r3 = 128
    1792:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_240>
    1793:	bf 23 00 00 00 00 00 00	r3 = r2

0000000000003810 <LBB3_240>:
; 	return ctx->len;
    1794:	61 61 00 00 00 00 00 00	r1 = *(u32 *)(r6 + 0)
; 		__notify_common_hdr(CILIUM_NOTIFY_TRACE, obs_point),
    1795:	61 62 44 00 00 00 00 00	r2 = *(u32 *)(r6 + 68)
; 	msg = (typeof(msg)) {
    1796:	73 7a b2 ff 00 00 00 00	*(u8 *)(r10 - 78) = r7
    1797:	18 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r4 = 0 ll
    1799:	63 4a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r4
    1800:	b7 04 00 00 01 00 00 00	r4 = 1
    1801:	6b 4a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r4
    1802:	63 2a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r2
    1803:	b7 02 00 00 04 01 00 00	r2 = 260
    1804:	6b 2a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r2
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    1805:	67 03 00 00 20 00 00 00	r3 <<= 32
    1806:	77 03 00 00 20 00 00 00	r3 >>= 32
; 	msg = (typeof(msg)) {
    1807:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    1808:	2d 31 01 00 00 00 00 00	if r1 > r3 goto +1 <LBB3_242>
    1809:	bf 13 00 00 00 00 00 00	r3 = r1

0000000000003890 <LBB3_242>:
    1810:	b7 09 00 00 00 00 00 00	r9 = 0
; 	case  8: jmp_8:  __it_set(d, 64);
    1811:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9
; 	msg = (typeof(msg)) {
    1812:	63 9a b4 ff 00 00 00 00	*(u32 *)(r10 - 76) = r9
    1813:	73 9a b3 ff 00 00 00 00	*(u8 *)(r10 - 77) = r9
    1814:	6b 9a b0 ff 00 00 00 00	*(u16 *)(r10 - 80) = r9
    1815:	63 9a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r9
    1816:	18 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r6 = 0 ll
    1818:	6b 6a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r6
; 	case  8: jmp_8:  __it_set(d, 64);
    1819:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
; 	msg = (typeof(msg)) {
    1820:	6b 3a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r3
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1821:	67 03 00 00 20 00 00 00	r3 <<= 32
    1822:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    1824:	4f 13 00 00 00 00 00 00	r3 |= r1
    1825:	bf a4 00 00 00 00 00 00	r4 = r10
    1826:	07 04 00 00 98 ff ff ff	r4 += -104
    1827:	79 a7 48 ff 00 00 00 00	r7 = *(u64 *)(r10 - 184)
; 	ctx_event_output(ctx, &EVENTS_MAP,
    1828:	bf 71 00 00 00 00 00 00	r1 = r7
    1829:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1831:	b7 05 00 00 30 00 00 00	r5 = 48
    1832:	85 00 00 00 19 00 00 00	call 25
; 		ctx->mark = MARK_MAGIC_TO_PROXY | proxy_port << 16;
    1833:	bf 81 00 00 00 00 00 00	r1 = r8
    1834:	67 01 00 00 10 00 00 00	r1 <<= 16
    1835:	47 01 00 00 00 02 00 00	r1 |= 512
    1836:	63 17 08 00 00 00 00 00	*(u32 *)(r7 + 8) = r1
; 	struct debug_msg msg = {
    1837:	6b 6a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r6
    1838:	bf 76 00 00 00 00 00 00	r6 = r7
    1839:	b7 01 00 00 02 08 00 00	r1 = 2050
    1840:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1841:	61 61 44 00 00 00 00 00	r1 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
    1842:	63 8a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r8
    1843:	63 1a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r1
    1844:	63 9a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r9
    1845:	63 9a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r9
    1846:	bf a4 00 00 00 00 00 00	r4 = r10
    1847:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1848:	bf 61 00 00 00 00 00 00	r1 = r6
    1849:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1851:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1853:	b7 05 00 00 14 00 00 00	r5 = 20
    1854:	85 00 00 00 19 00 00 00	call 25
; 	ctx_change_type(ctx, PACKET_HOST); /* Required for ingress packets from overlay */
    1855:	bf 61 00 00 00 00 00 00	r1 = r6
    1856:	b7 02 00 00 00 00 00 00	r2 = 0
    1857:	85 00 00 00 20 00 00 00	call 32

0000000000003a10 <LBB3_243>:
    1858:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)

0000000000003a18 <LBB3_244>:
; 	if (IS_ERR(ret))
    1859:	bf 91 00 00 00 00 00 00	r1 = r9
    1860:	67 01 00 00 20 00 00 00	r1 <<= 32
    1861:	77 01 00 00 20 00 00 00	r1 >>= 32
    1862:	b7 02 00 00 01 00 00 00	r2 = 1
    1863:	15 01 01 00 02 00 00 00	if r1 == 2 goto +1 <LBB3_246>
    1864:	b7 02 00 00 00 00 00 00	r2 = 0

0000000000003a48 <LBB3_246>:
    1865:	77 01 00 00 1f 00 00 00	r1 >>= 31
    1866:	4f 21 00 00 00 00 00 00	r1 |= r2
    1867:	15 01 30 00 00 00 00 00	if r1 == 0 goto +48 <LBB3_307>
    1868:	b7 01 00 00 02 00 00 00	r1 = 2
; 	ctx->cb[off] = data;
    1869:	63 16 40 00 00 00 00 00	*(u32 *)(r6 + 64) = r1
    1870:	63 46 34 00 00 00 00 00	*(u32 *)(r6 + 52) = r4
    1871:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1873:	63 16 30 00 00 00 00 00	*(u32 *)(r6 + 48) = r1
    1874:	b7 01 00 00 00 00 00 00	r1 = 0
    1875:	63 16 3c 00 00 00 00 00	*(u32 *)(r6 + 60) = r1
    1876:	63 96 38 00 00 00 00 00	*(u32 *)(r6 + 56) = r9
; 	return ctx->len;
    1877:	61 66 00 00 00 00 00 00	r6 = *(u32 *)(r6 + 0)
; 	struct metrics_value *entry, newEntry = {};
    1878:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
    1879:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    1880:	b7 01 00 00 00 02 00 00	r1 = 512
; 	struct metrics_key key = {};
    1881:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
; 	update_metrics(ctx_full_len(ctx), direction, -reason);
    1882:	87 09 00 00 00 00 00 00	r9 = -r9
; 	key.reason = reason;
    1883:	73 9a d8 ff 00 00 00 00	*(u8 *)(r10 - 40) = r9
    1884:	bf a2 00 00 00 00 00 00	r2 = r10
    1885:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
    1886:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1888:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
    1889:	15 00 07 00 00 00 00 00	if r0 == 0 goto +7 <LBB3_305>
; 		entry->count += 1;
    1890:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
    1891:	07 01 00 00 01 00 00 00	r1 += 1
    1892:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
    1893:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
    1894:	0f 61 00 00 00 00 00 00	r1 += r6
    1895:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
    1896:	05 00 0b 00 00 00 00 00	goto +11 <LBB3_306>

0000000000003b48 <LBB3_305>:
; 		newEntry.bytes = bytes;
    1897:	7b 6a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r6
    1898:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
    1899:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    1900:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
    1901:	07 02 00 00 d8 ff ff ff	r2 += -40
    1902:	bf a3 00 00 00 00 00 00	r3 = r10
    1903:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
    1904:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1906:	b7 04 00 00 00 00 00 00	r4 = 0
    1907:	85 00 00 00 02 00 00 00	call 2

0000000000003ba0 <LBB3_306>:
; 	asm volatile("r1 = %[ctx]\n\t"
    1908:	18 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r6 = 0 ll
    1910:	79 a7 48 ff 00 00 00 00	r7 = *(u64 *)(r10 - 184)
    1911:	bf 71 00 00 00 00 00 00	r1 = r7
    1912:	bf 62 00 00 00 00 00 00	r2 = r6
    1913:	b7 03 00 00 01 00 00 00	r3 = 1
    1914:	85 00 00 00 0c 00 00 00	call 12
    1915:	b7 09 00 00 02 00 00 00	r9 = 2

0000000000003be0 <LBB3_307>:
; }
    1916:	bf 90 00 00 00 00 00 00	r0 = r9
    1917:	95 00 00 00 00 00 00 00	exit

0000000000003bf0 <LBB3_249>:
; 	return (void *)(unsigned long)ctx->data_end;
    1918:	61 61 50 00 00 00 00 00	r1 = *(u32 *)(r6 + 80)
; 	return (void *)(unsigned long)ctx->data;
    1919:	61 63 4c 00 00 00 00 00	r3 = *(u32 *)(r6 + 76)
; 	if (data + tot_len > data_end)
    1920:	bf 32 00 00 00 00 00 00	r2 = r3
    1921:	07 02 00 00 22 00 00 00	r2 += 34
    1922:	18 09 00 00 7a ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967162 ll
    1924:	2d 12 be ff 00 00 00 00	if r2 > r1 goto -66 <LBB3_244>
    1925:	7b 3a 38 ff 00 00 00 00	*(u64 *)(r10 - 200) = r3
; 	orig_dip = ip4->daddr;
    1926:	61 38 1e 00 00 00 00 00	r8 = *(u32 *)(r3 + 30)
    1927:	b7 09 00 00 00 00 00 00	r9 = 0
; 	struct endpoint_key key = {};
    1928:	63 9a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r9
    1929:	63 9a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r9
    1930:	63 9a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r9
    1931:	63 9a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r9
    1932:	b7 06 00 00 01 00 00 00	r6 = 1
; 	key.family = ENDPOINT_KEY_IPV4;
    1933:	73 6a a8 ff 00 00 00 00	*(u8 *)(r10 - 88) = r6
; 	key.ip4 = ip;
    1934:	63 8a 98 ff 00 00 00 00	*(u32 *)(r10 - 104) = r8
    1935:	bf a2 00 00 00 00 00 00	r2 = r10
; 	orig_dip = ip4->daddr;
    1936:	07 02 00 00 98 ff ff ff	r2 += -104
; 	return map_lookup_elem(&ENDPOINTS_MAP, &key);
    1937:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1939:	85 00 00 00 01 00 00 00	call 1
    1940:	bf 07 00 00 00 00 00 00	r7 = r0
; 		if (ep) {
    1941:	15 07 26 00 00 00 00 00	if r7 == 0 goto +38 <LBB3_254>
; 			if (ep->flags & ENDPOINT_F_HOST) {
    1942:	61 71 08 00 00 00 00 00	r1 = *(u32 *)(r7 + 8)
    1943:	57 01 00 00 01 00 00 00	r1 &= 1
    1944:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    1945:	55 01 fb 00 00 00 00 00	if r1 != 0 goto +251 <LBB3_275>
    1946:	b7 01 00 00 00 00 00 00	r1 = 0
; 	ctx->cb[off] = data;
    1947:	63 16 38 00 00 00 00 00	*(u32 *)(r6 + 56) = r1
; 	mac_t router_mac = ep->node_mac;
    1948:	79 72 18 00 00 00 00 00	r2 = *(u64 *)(r7 + 24)
    1949:	7b 2a 50 ff 00 00 00 00	*(u64 *)(r10 - 176) = r2
; 	mac_t lxc_mac = ep->mac;
    1950:	79 72 10 00 00 00 00 00	r2 = *(u64 *)(r7 + 16)
    1951:	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r2
; 	cilium_dbg(ctx, DBG_LOCAL_DELIVERY, ep->lxc_id, seclabel);
    1952:	69 72 06 00 00 00 00 00	r2 = *(u16 *)(r7 + 6)
; 	struct debug_msg msg = {
    1953:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    1955:	6b 3a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r3
    1956:	b7 03 00 00 02 02 00 00	r3 = 514
    1957:	6b 3a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r3
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    1958:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
    1959:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
    1960:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    1962:	63 1a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r1
    1963:	63 2a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r2
    1964:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
    1965:	bf a4 00 00 00 00 00 00	r4 = r10
    1966:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    1967:	bf 61 00 00 00 00 00 00	r1 = r6
    1968:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1970:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    1972:	b7 05 00 00 14 00 00 00	r5 = 20
    1973:	85 00 00 00 19 00 00 00	call 25
; 	__u8 new_ttl, ttl = ip4->ttl;
    1974:	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 200)
    1975:	71 13 16 00 00 00 00 00	r3 = *(u8 *)(r1 + 22)
; 	if (ttl <= 1)
    1976:	25 03 5e 00 01 00 00 00	if r3 > 1 goto +94 <LBB3_264>

0000000000003dc8 <LBB3_253>:
    1977:	18 09 00 00 7a ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967162 ll
    1979:	05 00 86 ff 00 00 00 00	goto -122 <LBB3_243>

0000000000003de0 <LBB3_254>:
; 		struct endpoint_key key = {};
    1980:	63 9a 60 ff 00 00 00 00	*(u32 *)(r10 - 160) = r9
    1981:	63 9a 5c ff 00 00 00 00	*(u32 *)(r10 - 164) = r9
    1982:	63 9a 58 ff 00 00 00 00	*(u32 *)(r10 - 168) = r9
    1983:	63 9a 54 ff 00 00 00 00	*(u32 *)(r10 - 172) = r9
; 		key.family = ENDPOINT_KEY_IPV4;
    1984:	73 6a 60 ff 00 00 00 00	*(u8 *)(r10 - 160) = r6
; 		key.ip4 = orig_dip & IPV4_MASK;
    1985:	57 08 00 00 ff ff ff 00	r8 &= 16777215
    1986:	63 8a 50 ff 00 00 00 00	*(u32 *)(r10 - 176) = r8
    1987:	18 01 00 00 3a 8e 49 a3 00 00 00 00 e7 59 00 00	r1 = 98851411824186 ll
; 	union macaddr vtep_mac = ENCAP_IFINDEX_MAC;
    1989:	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 48) = r1
    1990:	79 a4 18 ff 00 00 00 00	r4 = *(u64 *)(r10 - 232)
; 	if (tunnel_endpoint) {
    1991:	bf 41 00 00 00 00 00 00	r1 = r4
    1992:	67 01 00 00 20 00 00 00	r1 <<= 32
    1993:	77 01 00 00 20 00 00 00	r1 >>= 32
    1994:	15 01 c2 00 00 00 00 00	if r1 == 0 goto +194 <LBB3_274>
; 	key.tunnel_id = seclabel;
    1995:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    1997:	67 02 00 00 20 00 00 00	r2 <<= 32
    1998:	77 02 00 00 20 00 00 00	r2 >>= 32
    1999:	b7 01 00 00 06 00 00 00	r1 = 6
    2000:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    2001:	15 02 02 00 01 00 00 00	if r2 == 1 goto +2 <LBB3_257>
    2002:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll

0000000000003ea0 <LBB3_257>:
    2004:	b7 02 00 00 00 00 00 00	r2 = 0
; 	struct bpf_tunnel_key key = {};
    2005:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
    2006:	b7 03 00 00 40 00 00 00	r3 = 64
; 	key.tunnel_ttl = 64;
    2007:	73 3a ed ff 00 00 00 00	*(u8 *)(r10 - 19) = r3
; 	struct bpf_tunnel_key key = {};
    2008:	63 2a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r2
    2009:	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r2
; 	node_id = bpf_htonl(tunnel_endpoint);
    2010:	dc 04 00 00 20 00 00 00	r4 = be32 r4
; 	key.remote_ipv4 = node_id;
    2011:	63 4a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r4
; 	key.tunnel_id = seclabel;
    2012:	63 1a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r1
; 	struct debug_msg msg = {
    2013:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    2015:	6b 3a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r3
    2016:	b7 03 00 00 02 03 00 00	r3 = 770
    2017:	6b 3a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r3
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    2018:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
    2019:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    2020:	63 1a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r1
    2021:	63 4a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r4
    2022:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
    2023:	bf a4 00 00 00 00 00 00	r4 = r10
    2024:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    2025:	bf 61 00 00 00 00 00 00	r1 = r6
    2026:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2028:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    2030:	b7 05 00 00 14 00 00 00	r5 = 20
    2031:	85 00 00 00 19 00 00 00	call 25
    2032:	bf a2 00 00 00 00 00 00	r2 = r10
    2033:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	ret = ctx_set_tunnel_key(ctx, &key, sizeof(key), BPF_F_ZERO_CSUM_TX);
    2034:	bf 61 00 00 00 00 00 00	r1 = r6
    2035:	b7 03 00 00 1c 00 00 00	r3 = 28
    2036:	b7 04 00 00 02 00 00 00	r4 = 2
    2037:	85 00 00 00 15 00 00 00	call 21
    2038:	67 00 00 00 20 00 00 00	r0 <<= 32
    2039:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 	if (unlikely(ret < 0))
    2040:	c5 00 8f 01 00 00 00 00	if r0 s< 0 goto +399 <LBB3_299>
    2041:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    2042:	bf 21 00 00 00 00 00 00	r1 = r2
    2043:	67 01 00 00 20 00 00 00	r1 <<= 32
    2044:	77 01 00 00 20 00 00 00	r1 >>= 32
    2045:	b7 07 00 00 80 00 00 00	r7 = 128
    2046:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_260>
    2047:	bf 27 00 00 00 00 00 00	r7 = r2

0000000000004000 <LBB3_260>:
; 	return ctx->len;
    2048:	61 68 00 00 00 00 00 00	r8 = *(u32 *)(r6 + 0)
    2049:	b7 01 00 00 00 00 00 00	r1 = 0
; 	struct metrics_value *entry, newEntry = {};
    2050:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
    2051:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2052:	b7 01 00 00 00 02 00 00	r1 = 512
; 	struct metrics_key key = {};
    2053:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    2054:	67 07 00 00 20 00 00 00	r7 <<= 32
    2055:	77 07 00 00 20 00 00 00	r7 >>= 32
    2056:	2d 78 01 00 00 00 00 00	if r8 > r7 goto +1 <LBB3_262>
    2057:	bf 87 00 00 00 00 00 00	r7 = r8

0000000000004050 <LBB3_262>:
    2058:	bf a2 00 00 00 00 00 00	r2 = r10
    2059:	07 02 00 00 f8 ff ff ff	r2 += -8
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
    2060:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2062:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
    2063:	15 00 3f 00 00 00 00 00	if r0 == 0 goto +63 <LBB3_268>
; 		entry->count += 1;
    2064:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
    2065:	07 01 00 00 01 00 00 00	r1 += 1
    2066:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
    2067:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
    2068:	0f 81 00 00 00 00 00 00	r1 += r8
    2069:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
    2070:	05 00 43 00 00 00 00 00	goto +67 <LBB3_269>

00000000000040b8 <LBB3_264>:
; 	new_ttl = ttl - 1;
    2071:	bf 34 00 00 00 00 00 00	r4 = r3
    2072:	07 04 00 00 ff ff ff ff	r4 += -1
    2073:	73 4a 98 ff 00 00 00 00	*(u8 *)(r10 - 104) = r4
; 	l3_csum_replace(ctx, off + offsetof(struct iphdr, check), ttl, new_ttl, 2);
    2074:	57 04 00 00 ff 00 00 00	r4 &= 255
    2075:	bf 61 00 00 00 00 00 00	r1 = r6
    2076:	b7 02 00 00 18 00 00 00	r2 = 24
    2077:	b7 05 00 00 02 00 00 00	r5 = 2
    2078:	85 00 00 00 0a 00 00 00	call 10
    2079:	bf a3 00 00 00 00 00 00	r3 = r10
; 	new_ttl = ttl - 1;
    2080:	07 03 00 00 98 ff ff ff	r3 += -104
; 	ctx_store_bytes(ctx, off + offsetof(struct iphdr, ttl), &new_ttl, sizeof(new_ttl), 0);
    2081:	bf 61 00 00 00 00 00 00	r1 = r6
    2082:	b7 02 00 00 16 00 00 00	r2 = 22
    2083:	b7 04 00 00 01 00 00 00	r4 = 1
    2084:	b7 05 00 00 00 00 00 00	r5 = 0
    2085:	85 00 00 00 09 00 00 00	call 9
    2086:	bf a3 00 00 00 00 00 00	r3 = r10
; 	new_ttl = ttl - 1;
    2087:	07 03 00 00 50 ff ff ff	r3 += -176
; 	return ctx_store_bytes(ctx, off + ETH_ALEN, mac, ETH_ALEN, 0);
    2088:	bf 61 00 00 00 00 00 00	r1 = r6
    2089:	b7 02 00 00 06 00 00 00	r2 = 6
    2090:	b7 04 00 00 06 00 00 00	r4 = 6
    2091:	b7 05 00 00 00 00 00 00	r5 = 0
    2092:	85 00 00 00 09 00 00 00	call 9
    2093:	18 09 00 00 73 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967155 ll
; 	return ctx_store_bytes(ctx, off + ETH_ALEN, mac, ETH_ALEN, 0);
    2095:	67 00 00 00 20 00 00 00	r0 <<= 32
    2096:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 	if (smac && eth_store_saddr(ctx, smac, 0) < 0)
    2097:	c5 00 10 ff 00 00 00 00	if r0 s< 0 goto -240 <LBB3_243>
    2098:	bf a3 00 00 00 00 00 00	r3 = r10
    2099:	07 03 00 00 f8 ff ff ff	r3 += -8
    2100:	b7 08 00 00 00 00 00 00	r8 = 0
; 	return ctx_store_bytes(ctx, off, mac, ETH_ALEN, 0);
    2101:	bf 61 00 00 00 00 00 00	r1 = r6
    2102:	b7 02 00 00 00 00 00 00	r2 = 0
    2103:	b7 04 00 00 06 00 00 00	r4 = 6
    2104:	b7 05 00 00 00 00 00 00	r5 = 0
    2105:	85 00 00 00 09 00 00 00	call 9
    2106:	67 00 00 00 20 00 00 00	r0 <<= 32
    2107:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 	if (dmac && eth_store_daddr(ctx, dmac, 0) < 0)
    2108:	c5 00 05 ff 00 00 00 00	if r0 s< 0 goto -251 <LBB3_243>
; 	return ctx->len;
    2109:	61 66 00 00 00 00 00 00	r6 = *(u32 *)(r6 + 0)
; 	struct metrics_value *entry, newEntry = {};
    2110:	7b 8a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r8
    2111:	7b 8a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r8
    2112:	b7 01 00 00 00 02 00 00	r1 = 512
; 	struct metrics_key key = {};
    2113:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
    2114:	bf a2 00 00 00 00 00 00	r2 = r10
    2115:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
    2116:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2118:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
    2119:	15 00 43 01 00 00 00 00	if r0 == 0 goto +323 <LBB3_300>
; 		entry->count += 1;
    2120:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
    2121:	07 01 00 00 01 00 00 00	r1 += 1
    2122:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
    2123:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
    2124:	0f 61 00 00 00 00 00 00	r1 += r6
    2125:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
    2126:	05 00 47 01 00 00 00 00	goto +327 <LBB3_301>

0000000000004278 <LBB3_268>:
; 		newEntry.bytes = bytes;
    2127:	7b 8a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r8
    2128:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
    2129:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2130:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
    2131:	07 02 00 00 f8 ff ff ff	r2 += -8
    2132:	bf a3 00 00 00 00 00 00	r3 = r10
    2133:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
    2134:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2136:	b7 04 00 00 00 00 00 00	r4 = 0
    2137:	85 00 00 00 02 00 00 00	call 2

00000000000042d0 <LBB3_269>:
; 	msg = (typeof(msg)) {
    2138:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2140:	67 02 00 00 20 00 00 00	r2 <<= 32
    2141:	77 02 00 00 20 00 00 00	r2 >>= 32
    2142:	b7 01 00 00 06 00 00 00	r1 = 6
    2143:	15 02 02 00 01 00 00 00	if r2 == 1 goto +2 <LBB3_271>

0000000000004300 <LBB3_270>:
    2144:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll

0000000000004310 <LBB3_271>:
    2146:	61 62 44 00 00 00 00 00	r2 = *(u32 *)(r6 + 68)
    2147:	b7 03 00 00 11 00 00 00	r3 = 17
    2148:	63 3a b4 ff 00 00 00 00	*(u32 *)(r10 - 76) = r3
    2149:	b7 03 00 00 01 00 00 00	r3 = 1
    2150:	6b 3a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r3
    2151:	63 8a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r8
    2152:	63 2a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r2
    2153:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2155:	6b 2a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r2
    2156:	b7 02 00 00 04 04 00 00	r2 = 1028
    2157:	6b 2a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r2
    2158:	b7 02 00 00 00 00 00 00	r2 = 0
    2159:	63 2a b0 ff 00 00 00 00	*(u32 *)(r10 - 80) = r2
    2160:	63 2a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r2
    2161:	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r2
    2162:	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r2
    2163:	63 1a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r1
    2164:	6b 7a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r7
    2165:	67 07 00 00 20 00 00 00	r7 <<= 32
    2166:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
    2168:	4f 17 00 00 00 00 00 00	r7 |= r1
    2169:	bf a4 00 00 00 00 00 00	r4 = r10
    2170:	07 04 00 00 98 ff ff ff	r4 += -104
    2171:	bf 61 00 00 00 00 00 00	r1 = r6
    2172:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2174:	bf 73 00 00 00 00 00 00	r3 = r7
    2175:	b7 05 00 00 30 00 00 00	r5 = 48
    2176:	85 00 00 00 19 00 00 00	call 25
    2177:	b7 01 00 00 11 00 00 00	r1 = 17
    2178:	b7 02 00 00 00 00 00 00	r2 = 0
    2179:	85 00 00 00 17 00 00 00	call 23
    2180:	bf 09 00 00 00 00 00 00	r9 = r0
    2181:	bf 91 00 00 00 00 00 00	r1 = r9
    2182:	67 01 00 00 20 00 00 00	r1 <<= 32
    2183:	77 01 00 00 20 00 00 00	r1 >>= 32
; 		if (ret == DROP_NO_TUNNEL_ENDPOINT)
    2184:	15 01 39 00 00 00 00 00	if r1 == 0 goto +57 <LBB3_279>
    2185:	18 02 00 00 60 ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967136 ll
; 		if (ret == DROP_NO_TUNNEL_ENDPOINT)
    2187:	1d 21 09 00 00 00 00 00	if r1 == r2 goto +9 <LBB3_275>
    2188:	05 00 b5 fe 00 00 00 00	goto -331 <LBB3_243>

0000000000004468 <LBB3_274>:
    2189:	bf a2 00 00 00 00 00 00	r2 = r10
; 	tunnel = map_lookup_elem(&TUNNEL_MAP, key);
    2190:	07 02 00 00 50 ff ff ff	r2 += -176
    2191:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2193:	85 00 00 00 01 00 00 00	call 1
    2194:	bf 07 00 00 00 00 00 00	r7 = r0
    2195:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 	if (!tunnel)
    2196:	55 07 94 00 00 00 00 00	if r7 != 0 goto +148 <LBB3_289>

00000000000044a8 <LBB3_275>:
; 	__u8 new_ttl, ttl = ip4->ttl;
    2197:	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 200)
    2198:	71 13 16 00 00 00 00 00	r3 = *(u8 *)(r1 + 22)
; 	if (ttl <= 1)
    2199:	25 03 01 00 01 00 00 00	if r3 > 1 goto +1 <LBB3_277>
    2200:	05 00 20 ff 00 00 00 00	goto -224 <LBB3_253>

00000000000044c8 <LBB3_277>:
; 	new_ttl = ttl - 1;
    2201:	bf 34 00 00 00 00 00 00	r4 = r3
    2202:	07 04 00 00 ff ff ff ff	r4 += -1
    2203:	73 4a 98 ff 00 00 00 00	*(u8 *)(r10 - 104) = r4
; 	l3_csum_replace(ctx, off + offsetof(struct iphdr, check), ttl, new_ttl, 2);
    2204:	57 04 00 00 ff 00 00 00	r4 &= 255
    2205:	bf 61 00 00 00 00 00 00	r1 = r6
    2206:	b7 02 00 00 18 00 00 00	r2 = 24
    2207:	b7 05 00 00 02 00 00 00	r5 = 2
    2208:	85 00 00 00 0a 00 00 00	call 10
    2209:	bf a3 00 00 00 00 00 00	r3 = r10
; 	new_ttl = ttl - 1;
    2210:	07 03 00 00 98 ff ff ff	r3 += -104
; 	ctx_store_bytes(ctx, off + offsetof(struct iphdr, ttl), &new_ttl, sizeof(new_ttl), 0);
    2211:	bf 61 00 00 00 00 00 00	r1 = r6
    2212:	b7 02 00 00 16 00 00 00	r2 = 22
    2213:	b7 04 00 00 01 00 00 00	r4 = 1
    2214:	b7 05 00 00 00 00 00 00	r5 = 0
    2215:	85 00 00 00 09 00 00 00	call 9
    2216:	bf a3 00 00 00 00 00 00	r3 = r10
; 	new_ttl = ttl - 1;
    2217:	07 03 00 00 80 ff ff ff	r3 += -128
; 	return ctx_store_bytes(ctx, off, mac, ETH_ALEN, 0);
    2218:	bf 61 00 00 00 00 00 00	r1 = r6
    2219:	b7 02 00 00 00 00 00 00	r2 = 0
    2220:	b7 04 00 00 06 00 00 00	r4 = 6
    2221:	b7 05 00 00 00 00 00 00	r5 = 0
    2222:	85 00 00 00 09 00 00 00	call 9
    2223:	18 09 00 00 73 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967155 ll
; 	return ctx_store_bytes(ctx, off, mac, ETH_ALEN, 0);
    2225:	67 00 00 00 20 00 00 00	r0 <<= 32
    2226:	c7 00 00 00 20 00 00 00	r0 s>>= 32
    2227:	79 a4 40 ff 00 00 00 00	r4 = *(u64 *)(r10 - 192)
; 	if (dmac && eth_store_daddr(ctx, dmac, 0) < 0)
    2228:	c5 00 8e fe 00 00 00 00	if r0 s< 0 goto -370 <LBB3_244>
; 	ctx->mark |= ((identity & 0xFFFF) << 16) | ((identity & 0xFF0000) >> 16);
    2229:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2231:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2233:	67 02 00 00 10 00 00 00	r2 <<= 16
    2234:	57 01 00 00 00 00 ff 00	r1 &= 16711680
    2235:	77 01 00 00 10 00 00 00	r1 >>= 16
    2236:	4f 12 00 00 00 00 00 00	r2 |= r1
; 		ctx->mark |= MARK_MAGIC_IDENTITY;
    2237:	61 61 08 00 00 00 00 00	r1 = *(u32 *)(r6 + 8)
; 	ctx->mark = ctx->mark & MARK_MAGIC_KEY_MASK;
    2238:	57 01 00 00 00 f0 00 00	r1 &= 61440
; 	ctx->mark |= ((identity & 0xFFFF) << 16) | ((identity & 0xFF0000) >> 16);
    2239:	4f 12 00 00 00 00 00 00	r2 |= r1
    2240:	47 02 00 00 00 0f 00 00	r2 |= 3840
    2241:	63 26 08 00 00 00 00 00	*(u32 *)(r6 + 8) = r2

0000000000004610 <LBB3_279>:
    2242:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    2243:	bf 21 00 00 00 00 00 00	r1 = r2
    2244:	67 01 00 00 20 00 00 00	r1 <<= 32
    2245:	77 01 00 00 20 00 00 00	r1 >>= 32
    2246:	b7 07 00 00 80 00 00 00	r7 = 128
    2247:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_281>
    2248:	bf 27 00 00 00 00 00 00	r7 = r2

0000000000004648 <LBB3_281>:
; 	return ctx->len;
    2249:	61 68 00 00 00 00 00 00	r8 = *(u32 *)(r6 + 0)
    2250:	b7 01 00 00 00 00 00 00	r1 = 0
; 	struct metrics_value *entry, newEntry = {};
    2251:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
    2252:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2253:	b7 01 00 00 00 02 00 00	r1 = 512
; 	struct metrics_key key = {};
    2254:	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 40) = r1
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    2255:	67 07 00 00 20 00 00 00	r7 <<= 32
    2256:	77 07 00 00 20 00 00 00	r7 >>= 32
    2257:	2d 78 01 00 00 00 00 00	if r8 > r7 goto +1 <LBB3_283>
    2258:	bf 87 00 00 00 00 00 00	r7 = r8

0000000000004698 <LBB3_283>:
    2259:	bf a2 00 00 00 00 00 00	r2 = r10
    2260:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
    2261:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2263:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
    2264:	15 00 07 00 00 00 00 00	if r0 == 0 goto +7 <LBB3_285>
; 		entry->count += 1;
    2265:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
    2266:	07 01 00 00 01 00 00 00	r1 += 1
    2267:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
    2268:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
    2269:	0f 81 00 00 00 00 00 00	r1 += r8
    2270:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
    2271:	05 00 0b 00 00 00 00 00	goto +11 <LBB3_286>

0000000000004700 <LBB3_285>:
; 		newEntry.bytes = bytes;
    2272:	7b 8a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r8
    2273:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
    2274:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2275:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
    2276:	07 02 00 00 d8 ff ff ff	r2 += -40
    2277:	bf a3 00 00 00 00 00 00	r3 = r10
    2278:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
    2279:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2281:	b7 04 00 00 00 00 00 00	r4 = 0
    2282:	85 00 00 00 02 00 00 00	call 2

0000000000004758 <LBB3_286>:
    2283:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
; 		__notify_common_hdr(CILIUM_NOTIFY_TRACE, obs_point),
    2284:	61 61 44 00 00 00 00 00	r1 = *(u32 *)(r6 + 68)
; 	msg = (typeof(msg)) {
    2285:	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 216)
    2286:	73 2a b2 ff 00 00 00 00	*(u8 *)(r10 - 78) = r2
    2287:	79 a2 40 ff 00 00 00 00	r2 = *(u64 *)(r10 - 192)
    2288:	63 2a ac ff 00 00 00 00	*(u32 *)(r10 - 84) = r2
    2289:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2291:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    2292:	63 8a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r8
    2293:	63 1a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r1
    2294:	b7 01 00 00 04 03 00 00	r1 = 772
    2295:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
    2296:	b7 09 00 00 00 00 00 00	r9 = 0
; 	case  8: jmp_8:  __it_set(d, 64);
    2297:	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 72) = r9
; 	msg = (typeof(msg)) {
    2298:	63 9a b4 ff 00 00 00 00	*(u32 *)(r10 - 76) = r9
    2299:	73 9a b3 ff 00 00 00 00	*(u8 *)(r10 - 77) = r9
    2300:	6b 9a b0 ff 00 00 00 00	*(u16 *)(r10 - 80) = r9
    2301:	b7 01 00 00 01 00 00 00	r1 = 1
    2302:	6b 1a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r1
    2303:	6b 7a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r7
    2304:	18 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r8 = 0 ll
    2306:	6b 8a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r8
; 	case  8: jmp_8:  __it_set(d, 64);
    2307:	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 64) = r9
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    2308:	67 07 00 00 20 00 00 00	r7 <<= 32
    2309:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    2311:	4f 17 00 00 00 00 00 00	r7 |= r1
    2312:	bf a4 00 00 00 00 00 00	r4 = r10
; 		__notify_common_hdr(CILIUM_NOTIFY_TRACE, obs_point),
    2313:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP,
    2314:	bf 61 00 00 00 00 00 00	r1 = r6
    2315:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2317:	bf 73 00 00 00 00 00 00	r3 = r7
    2318:	b7 05 00 00 30 00 00 00	r5 = 48
    2319:	85 00 00 00 19 00 00 00	call 25
; 	return ctx->len;
    2320:	61 63 00 00 00 00 00 00	r3 = *(u32 *)(r6 + 0)
; 	struct debug_capture_msg msg = {
    2321:	6b 8a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r8
    2322:	b7 01 00 00 03 04 00 00	r1 = 1027
    2323:	6b 1a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r1
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_CAPTURE, type),
    2324:	61 61 44 00 00 00 00 00	r1 = *(u32 *)(r6 + 68)
; 	struct debug_capture_msg msg = {
    2325:	b7 02 00 00 01 00 00 00	r2 = 1
    2326:	6b 2a a6 ff 00 00 00 00	*(u16 *)(r10 - 90) = r2
    2327:	63 1a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r1
    2328:	63 3a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r3
; 	__u64 cap_len = min_t(__u64, TRACE_PAYLOAD_LEN, ctx_len);
    2329:	a5 03 01 00 80 00 00 00	if r3 < 128 goto +1 <LBB3_288>
    2330:	b7 03 00 00 80 00 00 00	r3 = 128

00000000000048d8 <LBB3_288>:
; 	struct debug_capture_msg msg = {
    2331:	6b 3a a4 ff 00 00 00 00	*(u16 *)(r10 - 92) = r3
; 			 (cap_len << 32) | BPF_F_CURRENT_CPU,
    2332:	67 03 00 00 20 00 00 00	r3 <<= 32
    2333:	18 01 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r1 = 4294967295 ll
    2335:	4f 13 00 00 00 00 00 00	r3 |= r1
; 	struct debug_capture_msg msg = {
    2336:	7b 9a a8 ff 00 00 00 00	*(u64 *)(r10 - 88) = r9
    2337:	bf a4 00 00 00 00 00 00	r4 = r10
    2338:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP,
    2339:	bf 61 00 00 00 00 00 00	r1 = r6
    2340:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2342:	b7 05 00 00 18 00 00 00	r5 = 24
    2343:	85 00 00 00 19 00 00 00	call 25
    2344:	05 00 19 fe 00 00 00 00	goto -487 <LBB3_243>

0000000000004948 <LBB3_289>:
    2345:	bf a3 00 00 00 00 00 00	r3 = r10
    2346:	07 03 00 00 d0 ff ff ff	r3 += -48
    2347:	b7 08 00 00 06 00 00 00	r8 = 6
; 	return ctx_store_bytes(ctx, off, mac, ETH_ALEN, 0);
    2348:	bf 61 00 00 00 00 00 00	r1 = r6
    2349:	b7 02 00 00 00 00 00 00	r2 = 0
    2350:	b7 04 00 00 06 00 00 00	r4 = 6
    2351:	b7 05 00 00 00 00 00 00	r5 = 0
    2352:	85 00 00 00 09 00 00 00	call 9
    2353:	67 00 00 00 20 00 00 00	r0 <<= 32
    2354:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 	if (eth_store_daddr(ctx, (__u8 *) &vtep_mac.addr, 0) < 0)
    2355:	c5 00 54 00 00 00 00 00	if r0 s< 0 goto +84 <LBB3_299>
; 	key.tunnel_id = seclabel;
    2356:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2358:	67 01 00 00 20 00 00 00	r1 <<= 32
    2359:	77 01 00 00 20 00 00 00	r1 >>= 32
    2360:	15 01 02 00 01 00 00 00	if r1 == 1 goto +2 <LBB3_292>
    2361:	18 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r8 = 0 ll

00000000000049d8 <LBB3_292>:
; 	return __encap_and_redirect_with_nodeid(ctx, tunnel->ip4, seclabel, monitor);
    2363:	71 73 02 00 00 00 00 00	r3 = *(u8 *)(r7 + 2)
    2364:	71 71 03 00 00 00 00 00	r1 = *(u8 *)(r7 + 3)
    2365:	71 74 00 00 00 00 00 00	r4 = *(u8 *)(r7 + 0)
    2366:	71 75 01 00 00 00 00 00	r5 = *(u8 *)(r7 + 1)
    2367:	b7 02 00 00 00 00 00 00	r2 = 0
; 	struct bpf_tunnel_key key = {};
    2368:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
    2369:	b7 00 00 00 40 00 00 00	r0 = 64
; 	key.tunnel_ttl = 64;
    2370:	73 0a ed ff 00 00 00 00	*(u8 *)(r10 - 19) = r0
; 	return __encap_and_redirect_with_nodeid(ctx, tunnel->ip4, seclabel, monitor);
    2371:	67 05 00 00 08 00 00 00	r5 <<= 8
    2372:	4f 45 00 00 00 00 00 00	r5 |= r4
    2373:	67 01 00 00 08 00 00 00	r1 <<= 8
    2374:	4f 31 00 00 00 00 00 00	r1 |= r3
    2375:	67 01 00 00 10 00 00 00	r1 <<= 16
    2376:	4f 51 00 00 00 00 00 00	r1 |= r5
; 	struct bpf_tunnel_key key = {};
    2377:	63 2a f0 ff 00 00 00 00	*(u32 *)(r10 - 16) = r2
    2378:	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r2
; 	key.tunnel_id = seclabel;
    2379:	63 8a d8 ff 00 00 00 00	*(u32 *)(r10 - 40) = r8
; 	node_id = bpf_htonl(tunnel_endpoint);
    2380:	dc 01 00 00 20 00 00 00	r1 = be32 r1
; 	key.remote_ipv4 = node_id;
    2381:	63 1a dc ff 00 00 00 00	*(u32 *)(r10 - 36) = r1
; 	struct debug_msg msg = {
    2382:	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r3 = 0 ll
    2384:	6b 3a 9a ff 00 00 00 00	*(u16 *)(r10 - 102) = r3
    2385:	b7 03 00 00 02 03 00 00	r3 = 770
    2386:	6b 3a 98 ff 00 00 00 00	*(u16 *)(r10 - 104) = r3
; 		__notify_common_hdr(CILIUM_NOTIFY_DBG_MSG, type),
    2387:	61 63 44 00 00 00 00 00	r3 = *(u32 *)(r6 + 68)
; 	struct debug_msg msg = {
    2388:	63 2a a8 ff 00 00 00 00	*(u32 *)(r10 - 88) = r2
    2389:	63 8a a4 ff 00 00 00 00	*(u32 *)(r10 - 92) = r8
    2390:	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 96) = r1
    2391:	63 3a 9c ff 00 00 00 00	*(u32 *)(r10 - 100) = r3
    2392:	bf a4 00 00 00 00 00 00	r4 = r10
; 	return __encap_and_redirect_with_nodeid(ctx, tunnel->ip4, seclabel, monitor);
    2393:	07 04 00 00 98 ff ff ff	r4 += -104
; 	ctx_event_output(ctx, &EVENTS_MAP, BPF_F_CURRENT_CPU,
    2394:	bf 61 00 00 00 00 00 00	r1 = r6
    2395:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2397:	18 03 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r3 = 4294967295 ll
    2399:	b7 05 00 00 14 00 00 00	r5 = 20
    2400:	85 00 00 00 19 00 00 00	call 25
    2401:	bf a2 00 00 00 00 00 00	r2 = r10
; 	return __encap_and_redirect_with_nodeid(ctx, tunnel->ip4, seclabel, monitor);
    2402:	07 02 00 00 d8 ff ff ff	r2 += -40
; 	ret = ctx_set_tunnel_key(ctx, &key, sizeof(key), BPF_F_ZERO_CSUM_TX);
    2403:	bf 61 00 00 00 00 00 00	r1 = r6
    2404:	b7 03 00 00 1c 00 00 00	r3 = 28
    2405:	b7 04 00 00 02 00 00 00	r4 = 2
    2406:	85 00 00 00 15 00 00 00	call 21
    2407:	67 00 00 00 20 00 00 00	r0 <<= 32
    2408:	c7 00 00 00 20 00 00 00	r0 s>>= 32
; 	if (unlikely(ret < 0))
    2409:	c5 00 1e 00 00 00 00 00	if r0 s< 0 goto +30 <LBB3_299>
    2410:	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 240)
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    2411:	bf 21 00 00 00 00 00 00	r1 = r2
    2412:	67 01 00 00 20 00 00 00	r1 <<= 32
    2413:	77 01 00 00 20 00 00 00	r1 >>= 32
    2414:	b7 07 00 00 80 00 00 00	r7 = 128
    2415:	15 01 01 00 00 00 00 00	if r1 == 0 goto +1 <LBB3_295>
    2416:	bf 27 00 00 00 00 00 00	r7 = r2

0000000000004b88 <LBB3_295>:
; 	return ctx->len;
    2417:	61 68 00 00 00 00 00 00	r8 = *(u32 *)(r6 + 0)
    2418:	b7 01 00 00 00 00 00 00	r1 = 0
; 	struct metrics_value *entry, newEntry = {};
    2419:	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r1
    2420:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2421:	b7 01 00 00 00 02 00 00	r1 = 512
; 	struct metrics_key key = {};
    2422:	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r1
; 	__u64 cap_len = min_t(__u64, monitor ? : TRACE_PAYLOAD_LEN,
    2423:	67 07 00 00 20 00 00 00	r7 <<= 32
    2424:	77 07 00 00 20 00 00 00	r7 >>= 32
    2425:	2d 78 01 00 00 00 00 00	if r8 > r7 goto +1 <LBB3_297>
    2426:	bf 87 00 00 00 00 00 00	r7 = r8

0000000000004bd8 <LBB3_297>:
    2427:	bf a2 00 00 00 00 00 00	r2 = r10
    2428:	07 02 00 00 f8 ff ff ff	r2 += -8
; 	entry = map_lookup_elem(&METRICS_MAP, &key);
    2429:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2431:	85 00 00 00 01 00 00 00	call 1
; 	if (entry) {
    2432:	15 00 25 00 00 00 00 00	if r0 == 0 goto +37 <LBB3_302>
; 		entry->count += 1;
    2433:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
    2434:	07 01 00 00 01 00 00 00	r1 += 1
    2435:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
; 		entry->bytes += bytes;
    2436:	79 01 08 00 00 00 00 00	r1 = *(u64 *)(r0 + 8)
    2437:	0f 81 00 00 00 00 00 00	r1 += r8
    2438:	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 8) = r1
    2439:	05 00 29 00 00 00 00 00	goto +41 <LBB3_303>

0000000000004c40 <LBB3_299>:
    2440:	18 09 00 00 73 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967155 ll
    2442:	05 00 b7 fd 00 00 00 00	goto -585 <LBB3_243>

0000000000004c58 <LBB3_300>:
; 		newEntry.bytes = bytes;
    2443:	7b 6a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r6
    2444:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
    2445:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2446:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
    2447:	07 02 00 00 d8 ff ff ff	r2 += -40
    2448:	bf a3 00 00 00 00 00 00	r3 = r10
    2449:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
    2450:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2452:	b7 04 00 00 00 00 00 00	r4 = 0
    2453:	85 00 00 00 02 00 00 00	call 2

0000000000004cb0 <LBB3_301>:
; 	ctx->cb[off] = data;
    2454:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2456:	79 a6 48 ff 00 00 00 00	r6 = *(u64 *)(r10 - 184)
    2457:	63 16 30 00 00 00 00 00	*(u32 *)(r6 + 48) = r1
; 	ctx_store_meta(ctx, CB_IFINDEX, ep->ifindex);
    2458:	61 71 00 00 00 00 00 00	r1 = *(u32 *)(r7 + 0)
    2459:	b7 02 00 00 00 00 00 00	r2 = 0
; 	ctx->cb[off] = data;
    2460:	63 26 3c 00 00 00 00 00	*(u32 *)(r6 + 60) = r2
    2461:	63 16 34 00 00 00 00 00	*(u32 *)(r6 + 52) = r1
; 	tail_call_dynamic(ctx, &POLICY_CALL_MAP, ep->lxc_id);
    2462:	69 73 06 00 00 00 00 00	r3 = *(u16 *)(r7 + 6)
; 	tail_call(ctx, map, slot);
    2463:	bf 61 00 00 00 00 00 00	r1 = r6
    2464:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2466:	85 00 00 00 0c 00 00 00	call 12
    2467:	18 09 00 00 74 ff ff ff 00 00 00 00 00 00 00 00	r9 = 4294967156 ll
    2469:	05 00 9c fd 00 00 00 00	goto -612 <LBB3_243>

0000000000004d30 <LBB3_302>:
; 		newEntry.bytes = bytes;
    2470:	7b 8a a0 ff 00 00 00 00	*(u64 *)(r10 - 96) = r8
    2471:	b7 01 00 00 01 00 00 00	r1 = 1
; 		newEntry.count = 1;
    2472:	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 104) = r1
    2473:	bf a2 00 00 00 00 00 00	r2 = r10
; 		newEntry.bytes = bytes;
    2474:	07 02 00 00 f8 ff ff ff	r2 += -8
    2475:	bf a3 00 00 00 00 00 00	r3 = r10
    2476:	07 03 00 00 98 ff ff ff	r3 += -104
; 		map_update_elem(&METRICS_MAP, &key, &newEntry, 0);
    2477:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
    2479:	b7 04 00 00 00 00 00 00	r4 = 0
    2480:	85 00 00 00 02 00 00 00	call 2

0000000000004d88 <LBB3_303>:
; 	msg = (typeof(msg)) {
    2481:	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r2 = 0 ll
    2483:	67 02 00 00 20 00 00 00	r2 <<= 32
    2484:	77 02 00 00 20 00 00 00	r2 >>= 32
    2485:	b7 01 00 00 06 00 00 00	r1 = 6
    2486:	15 02 ab fe 01 00 00 00	if r2 == 1 goto -341 <LBB3_271>
    2487:	05 00 a8 fe 00 00 00 00	goto -344 <LBB3_270>

Disassembly of section 2/6:
