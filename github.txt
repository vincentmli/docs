1, github fork/clone 

https://gist.github.com/Chaser324/ce0505fbed06b947d962

a, fork and clone to local dev box
b, cd local clone 
 git remote add upstream https://github.com/UPSTREAM-USER/ORIGINAL-PROJECT.git
c, git fetch upstream
d, git checkout master
e, git merge upstream/master
f, git checkout <dev-branch>
work, work, work, test, test, test
g, commit and push
git commit; git push origin <dev-branch> 


2, github cherry-pick for PR

https://poanchen.github.io/blog/2017/11/12/How-to-create-a-GitHub-pull-request-with-a-specific-commits

git remote add upstream https://github.com/upstream_github_username/upstream_github_repo_name.git
git checkout -b new-branch-name-for-PR upstream/master
git cherry-pick <dev-branch commit id>
git push -u origin new-branch-name-for-PR

then go to github to do compare and create pull request

for example:

commit in dev branch:  						git commit -a (ID a323ae9f7df)
push dev branch to github: 					git push origin vli-dev
checkout master branch:  					git checkout master
checkout new branch for PR from upstream master: 		git checkout -b vli-PR upstream/master
cherry pick dev branch commit id:  				git cherry-pick a323ae9f7df
push new branch for PR to github:  				git push -u origin vli-PR

remove the pull request branch when pull request is merged to upstream

$ git branch
* master
  vli-PR
  vli-dev

$ git branch -D vli-PR
Deleted branch vli-PR (was 2ab80a2).

$ git push --delete origin vli-PR


https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git

https://stackoverflow.com/questions/15407075/how-could-i-use-git-bisect-to-find-the-first-good-commit

git bisect start --term-new=fixed --term-old=unfixed
git bisect fixed master
git bisect unfixed $some-old-sha1
As you test, say git bisect fixed or git bisect unfixed as appropriate.


https://stackoverflow.com/questions/6217156/break-a-previous-commit-into-multiple-commits
https://stackoverflow.com/questions/7239333/how-do-i-commit-only-some-files

A) Splitting the most recent commit
To split apart your most recent commit, first:

$ git reset HEAD~

B) git commit "list of changed files that is suppose to be together in one commit"


https://stackoverflow.com/questions/3921708/how-do-i-squash-two-non-consecutive-commits

C) you may make changes later after splitting one commit into multiple commites

say one commit split into 4 commites, A,B,C,D, then later you changed some files
in commit C, and then you commited the changes into commit E, now you have
commit A,B,C,D,E, but commit C and E is suppose to be one commit and you want to
merge commit E into commit C

$git rebase -i HEAD~5

will bring you

pick aaaaaaa Commit A
pick bbbbbbb Commit B
pick ccccccc Commit C
pick ddddddd Commit D
pick eeeeeee Commit E

then re-arrange the order to
below and squash E, save and
edit the commit message

pick ccccccc Commit C
s eeeeeee Commit E
pick aaaaaaa Commit A
pick bbbbbbb Commit B
pick ddddddd Commit D

another example:
https://stackoverflow.com/questions/44666991/how-can-i-rebase-3-commits-with-one-merge-of-master-into-one-commit

commit 1
commit 2
commit 3

only want to rebase and merge 1 and 3

then git rebase -i HEAD~3

remove commit 2 line, squash 3, pick 1

pick commit 1
s    commit 3


my github f5devcentral cilium master workflow

git checkout master
git fetch upstream
git checkout vli-vxlan
git rebase upstream/master
...resolve conflicts...
git push origin vli-vxlan --force
git checkout master
git rebase vli-vxlan
git push origin master --force

search github by author
https://github.com/search?p=1&q=is%3Apr+author%3Avincentmli&type=Issues
